window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "src", "modulename": "src", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.agent", "modulename": "src.agent", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.agent.knowledge_base", "modulename": "src.agent.knowledge_base", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.agent.mod_coor", "modulename": "src.agent.mod_coor", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.agent.mod_coor.logger", "modulename": "src.agent.mod_coor", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger src.agent.mod_coor (WARNING)&gt;"}, {"fullname": "src.agent.mod_coor.OLLAMA_MODEL_NAME", "modulename": "src.agent.mod_coor", "qualname": "OLLAMA_MODEL_NAME", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;mistral&#x27;"}, {"fullname": "src.agent.mod_coor.OLLAMA_HOST", "modulename": "src.agent.mod_coor", "qualname": "OLLAMA_HOST", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;http://localhost:11434&#x27;"}, {"fullname": "src.agent.mod_coor.capgate_agent_instance", "modulename": "src.agent.mod_coor", "qualname": "capgate_agent_instance", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "src.agent.mod_coor.capgate_query_engine", "modulename": "src.agent.mod_coor", "qualname": "capgate_query_engine", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "src.agent.mod_coor.llm_instance", "modulename": "src.agent.mod_coor", "qualname": "llm_instance", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "src.agent.mod_coor.embed_model_instance", "modulename": "src.agent.mod_coor", "qualname": "embed_model_instance", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "src.agent.mod_coor.service_context_instance", "modulename": "src.agent.mod_coor", "qualname": "service_context_instance", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "src.agent.mod_coor.initialize_capgate_agent", "modulename": "src.agent.mod_coor", "qualname": "initialize_capgate_agent", "kind": "function", "doc": "<p>Initializes the MCP Agent's LLM, embedding model, and loads its knowledge base.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.agent.mod_coor.index_capgate_knowledge", "modulename": "src.agent.mod_coor", "qualname": "index_capgate_knowledge", "kind": "function", "doc": "<p>Loads documents from CapGate, nexusdevtools, and internal docs, then indexes them into ChromaDB.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.agent.mod_coor.ask_capgate_agent", "modulename": "src.agent.mod_coor", "qualname": "ask_capgate_agent", "kind": "function", "doc": "<p>Allows external CapGate modules to ask the agent a question or give a task.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">query_text</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.agent.mod_coor.start_capgate_agent_interactive_session", "modulename": "src.agent.mod_coor", "qualname": "start_capgate_agent_interactive_session", "kind": "function", "doc": "<p>Starts an interactive command-line session with the agent.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.agent.tools", "modulename": "src.agent.tools", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.agent.tools.logger", "modulename": "src.agent.tools", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger src.agent.tools (WARNING)&gt;"}, {"fullname": "src.agent.tools.CapGateLogToolSchema", "modulename": "src.agent.tools", "qualname": "CapGateLogToolSchema", "kind": "class", "doc": "<p>!!! abstract \"Usage Documentation\"\n    <a href=\"../concepts/models.md\">Models</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of the class variables defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "src.agent.tools.CapGateLogToolSchema.message", "modulename": "src.agent.tools", "qualname": "CapGateLogToolSchema.message", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.agent.tools.CapGateLogToolSchema.level", "modulename": "src.agent.tools", "qualname": "CapGateLogToolSchema.level", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.agent.tools.CapGateLogToolSchema.model_config", "modulename": "src.agent.tools", "qualname": "CapGateLogToolSchema.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "src.agent.tools.internal_capgate_log_event", "modulename": "src.agent.tools", "qualname": "internal_capgate_log_event", "kind": "function", "doc": "<p>Logs an event within the CapGate system using CapGate's core logger.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;INFO&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.agent.tools.capgate_log_tool", "modulename": "src.agent.tools", "qualname": "capgate_log_tool", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;llama_index.core.tools.function_tool.FunctionTool object&gt;"}, {"fullname": "src.agent.tools.FileReadToolSchema", "modulename": "src.agent.tools", "qualname": "FileReadToolSchema", "kind": "class", "doc": "<p>!!! abstract \"Usage Documentation\"\n    <a href=\"../concepts/models.md\">Models</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of the class variables defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "src.agent.tools.FileReadToolSchema.file_path", "modulename": "src.agent.tools", "qualname": "FileReadToolSchema.file_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.agent.tools.FileReadToolSchema.model_config", "modulename": "src.agent.tools", "qualname": "FileReadToolSchema.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "src.agent.tools.read_capgate_file_content", "modulename": "src.agent.tools", "qualname": "read_capgate_file_content", "kind": "function", "doc": "<p>Reads the content of a specified file within the CapGate project or nexusdevtools.\nPaths are relative to the CapGate root directory.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.agent.tools.capgate_file_read_tool", "modulename": "src.agent.tools", "qualname": "capgate_file_read_tool", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;llama_index.core.tools.function_tool.FunctionTool object&gt;"}, {"fullname": "src.agent.tools.FileWriteToolSchema", "modulename": "src.agent.tools", "qualname": "FileWriteToolSchema", "kind": "class", "doc": "<p>!!! abstract \"Usage Documentation\"\n    <a href=\"../concepts/models.md\">Models</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of the class variables defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "src.agent.tools.FileWriteToolSchema.file_path", "modulename": "src.agent.tools", "qualname": "FileWriteToolSchema.file_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.agent.tools.FileWriteToolSchema.content", "modulename": "src.agent.tools", "qualname": "FileWriteToolSchema.content", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.agent.tools.FileWriteToolSchema.model_config", "modulename": "src.agent.tools", "qualname": "FileWriteToolSchema.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "src.agent.tools.write_capgate_file_content_with_approval", "modulename": "src.agent.tools", "qualname": "write_capgate_file_content_with_approval", "kind": "function", "doc": "<p>Writes content to a specified file within the CapGate project.\nRequires explicit human approval for execution.\nThe agent should clearly state its intent and ask the human for approval before calling this tool.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">content</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.agent.tools.capgate_file_write_tool", "modulename": "src.agent.tools", "qualname": "capgate_file_write_tool", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;llama_index.core.tools.function_tool.FunctionTool object&gt;"}, {"fullname": "src.agent.tools.GitCommandToolSchema", "modulename": "src.agent.tools", "qualname": "GitCommandToolSchema", "kind": "class", "doc": "<p>!!! abstract \"Usage Documentation\"\n    <a href=\"../concepts/models.md\">Models</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of the class variables defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "src.agent.tools.GitCommandToolSchema.command", "modulename": "src.agent.tools", "qualname": "GitCommandToolSchema.command", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.agent.tools.GitCommandToolSchema.args", "modulename": "src.agent.tools", "qualname": "GitCommandToolSchema.args", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[List[str]]"}, {"fullname": "src.agent.tools.GitCommandToolSchema.model_config", "modulename": "src.agent.tools", "qualname": "GitCommandToolSchema.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "src.agent.tools.execute_capgate_git_command", "modulename": "src.agent.tools", "qualname": "execute_capgate_git_command", "kind": "function", "doc": "<p>Executes a git command within the CapGate repository.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">command</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.agent.tools.capgate_git_tool", "modulename": "src.agent.tools", "qualname": "capgate_git_tool", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;llama_index.core.tools.function_tool.FunctionTool object&gt;"}, {"fullname": "src.agent.tools.ALL_CAPGATE_AGENT_TOOLS", "modulename": "src.agent.tools", "qualname": "ALL_CAPGATE_AGENT_TOOLS", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&lt;llama_index.core.tools.function_tool.FunctionTool object&gt;, &lt;llama_index.core.tools.function_tool.FunctionTool object&gt;, &lt;llama_index.core.tools.function_tool.FunctionTool object&gt;, &lt;llama_index.core.tools.function_tool.FunctionTool object&gt;]"}, {"fullname": "src.capgate_types", "modulename": "src.capgate_types", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.capgate_types.brain", "modulename": "src.capgate_types.brain", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.capgate_types.brain.event_types", "modulename": "src.capgate_types.brain.event_types", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.capgate_types.brain.event_types.EventType", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventType", "kind": "variable", "doc": "<p></p>\n", "default_value": "typing.Literal[&#x27;interface&#x27;, &#x27;device&#x27;, &#x27;credential&#x27;, &#x27;meta&#x27;, &#x27;flat_event&#x27;]"}, {"fullname": "src.capgate_types.brain.event_types.FlatEventRow", "modulename": "src.capgate_types.brain.event_types", "qualname": "FlatEventRow", "kind": "class", "doc": "<p></p>\n", "bases": "typing.TypedDict"}, {"fullname": "src.capgate_types.brain.event_types.FlatEventRow.timestamp", "modulename": "src.capgate_types.brain.event_types", "qualname": "FlatEventRow.timestamp", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.capgate_types.brain.event_types.FlatEventRow.type", "modulename": "src.capgate_types.brain.event_types", "qualname": "FlatEventRow.type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Literal[&#x27;interface&#x27;, &#x27;device&#x27;, &#x27;credential&#x27;, &#x27;meta&#x27;, &#x27;flat_event&#x27;]"}, {"fullname": "src.capgate_types.brain.event_types.FlatEventRow.id", "modulename": "src.capgate_types.brain.event_types", "qualname": "FlatEventRow.id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.capgate_types.brain.event_types.FlatEventRow.vendor", "modulename": "src.capgate_types.brain.event_types", "qualname": "FlatEventRow.vendor", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.capgate_types.brain.event_types.FlatEventRow.signal_strength", "modulename": "src.capgate_types.brain.event_types", "qualname": "FlatEventRow.signal_strength", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.brain.event_types.FlatEventRow.is_router", "modulename": "src.capgate_types.brain.event_types", "qualname": "FlatEventRow.is_router", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.brain.event_types.FlatEventRow.mode", "modulename": "src.capgate_types.brain.event_types", "qualname": "FlatEventRow.mode", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.capgate_types.brain.event_types.FlatEventRow.mac", "modulename": "src.capgate_types.brain.event_types", "qualname": "FlatEventRow.mac", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.capgate_types.brain.event_types.FlatEvent", "modulename": "src.capgate_types.brain.event_types", "qualname": "FlatEvent", "kind": "class", "doc": "<p></p>\n", "bases": "typing.TypedDict"}, {"fullname": "src.capgate_types.brain.event_types.FlatEvent.rows", "modulename": "src.capgate_types.brain.event_types", "qualname": "FlatEvent.rows", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[src.capgate_types.brain.event_types.FlatEventRow]"}, {"fullname": "src.capgate_types.brain.event_types.FlatEvent.metadata", "modulename": "src.capgate_types.brain.event_types", "qualname": "FlatEvent.metadata", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, object]"}, {"fullname": "src.capgate_types.brain.event_types.EventLogEntry", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventLogEntry", "kind": "class", "doc": "<p></p>\n", "bases": "typing.TypedDict"}, {"fullname": "src.capgate_types.brain.event_types.EventLogEntry.timestamp", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventLogEntry.timestamp", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.capgate_types.brain.event_types.EventLogEntry.type", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventLogEntry.type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Literal[&#x27;interface&#x27;, &#x27;device&#x27;, &#x27;credential&#x27;, &#x27;meta&#x27;, &#x27;flat_event&#x27;]"}, {"fullname": "src.capgate_types.brain.event_types.EventLogEntry.id", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventLogEntry.id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.capgate_types.brain.event_types.EventLogEntry.data", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventLogEntry.data", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, object]"}, {"fullname": "src.capgate_types.brain.event_types.AppContextData", "modulename": "src.capgate_types.brain.event_types", "qualname": "AppContextData", "kind": "class", "doc": "<p></p>\n", "bases": "typing.TypedDict"}, {"fullname": "src.capgate_types.brain.event_types.AppContextData.interfaces", "modulename": "src.capgate_types.brain.event_types", "qualname": "AppContextData.interfaces", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, object]"}, {"fullname": "src.capgate_types.brain.event_types.AppContextData.devices", "modulename": "src.capgate_types.brain.event_types", "qualname": "AppContextData.devices", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, object]"}, {"fullname": "src.capgate_types.brain.event_types.AppContextData.credentials", "modulename": "src.capgate_types.brain.event_types", "qualname": "AppContextData.credentials", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, object]"}, {"fullname": "src.capgate_types.brain.event_types.AppContextData.metadata", "modulename": "src.capgate_types.brain.event_types", "qualname": "AppContextData.metadata", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, object]"}, {"fullname": "src.capgate_types.brain.event_types.AppContextData.event_log", "modulename": "src.capgate_types.brain.event_types", "qualname": "AppContextData.event_log", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[src.capgate_types.brain.event_types.EventLogEntry]"}, {"fullname": "src.capgate_types.brain.event_types.AppContextData.flat_events", "modulename": "src.capgate_types.brain.event_types", "qualname": "AppContextData.flat_events", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[src.capgate_types.brain.event_types.FlatEvent]"}, {"fullname": "src.capgate_types.brain.event_types.EventSummary", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventSummary", "kind": "class", "doc": "<p></p>\n", "bases": "typing.TypedDict"}, {"fullname": "src.capgate_types.brain.event_types.EventSummary.total_interfaces", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventSummary.total_interfaces", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.brain.event_types.EventSummary.total_devices", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventSummary.total_devices", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.brain.event_types.EventSummary.total_credentials", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventSummary.total_credentials", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.brain.event_types.EventSummary.total_metadata", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventSummary.total_metadata", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.brain.event_types.EventSummary.scan_duration", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventSummary.scan_duration", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.capgate_types.brain.event_types.EventSummary.event_count", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventSummary.event_count", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.brain.event_types.EventSummary.last_updated", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventSummary.last_updated", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.capgate_types.brain.event_types.EventSummary.source", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventSummary.source", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.capgate_types.brain.event_types.EventData", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventData", "kind": "class", "doc": "<p></p>\n", "bases": "typing.TypedDict"}, {"fullname": "src.capgate_types.brain.event_types.EventData.type", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventData.type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Literal[&#x27;interface&#x27;, &#x27;device&#x27;, &#x27;credential&#x27;, &#x27;meta&#x27;, &#x27;flat_event&#x27;]"}, {"fullname": "src.capgate_types.brain.event_types.EventData.id", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventData.id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.capgate_types.brain.event_types.EventData.data", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventData.data", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, object]"}, {"fullname": "src.capgate_types.brain.event_types.EventData.timestamp", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventData.timestamp", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.capgate_types.brain.event_types.EventData.source", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventData.source", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.capgate_types.brain.event_types.EventData.context", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventData.context", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, object]"}, {"fullname": "src.capgate_types.brain.event_types.EventLog", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventLog", "kind": "class", "doc": "<p></p>\n", "bases": "typing.TypedDict"}, {"fullname": "src.capgate_types.brain.event_types.EventLog.entries", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventLog.entries", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[src.capgate_types.brain.event_types.EventLogEntry]"}, {"fullname": "src.capgate_types.brain.event_types.EventLog.metadata", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventLog.metadata", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, object]"}, {"fullname": "src.capgate_types.brain.event_types.EventConfig", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventConfig", "kind": "class", "doc": "<p></p>\n", "bases": "typing.TypedDict"}, {"fullname": "src.capgate_types.brain.event_types.EventConfig.interface", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventConfig.interface", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, object]"}, {"fullname": "src.capgate_types.brain.event_types.EventConfig.device", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventConfig.device", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, object]"}, {"fullname": "src.capgate_types.brain.event_types.EventConfig.credential", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventConfig.credential", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, object]"}, {"fullname": "src.capgate_types.brain.event_types.EventConfig.metadata", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventConfig.metadata", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, object]"}, {"fullname": "src.capgate_types.brain.event_types.EventConfig.flat_event", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventConfig.flat_event", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, object]"}, {"fullname": "src.capgate_types.brain.event_types.EventConfig.event_summary", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventConfig.event_summary", "kind": "variable", "doc": "<p></p>\n", "annotation": ": src.capgate_types.brain.event_types.EventSummary"}, {"fullname": "src.capgate_types.brain.event_types.EventError", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventError", "kind": "class", "doc": "<p></p>\n", "bases": "typing.TypedDict"}, {"fullname": "src.capgate_types.brain.event_types.EventError.error_type", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventError.error_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.capgate_types.brain.event_types.EventError.message", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventError.message", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.capgate_types.brain.event_types.EventError.timestamp", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventError.timestamp", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.capgate_types.brain.event_types.EventError.source", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventError.source", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.capgate_types.brain.event_types.EventError.context", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventError.context", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, object]"}, {"fullname": "src.capgate_types.brain.event_types.EventScanResult", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanResult", "kind": "class", "doc": "<p></p>\n", "bases": "typing.TypedDict"}, {"fullname": "src.capgate_types.brain.event_types.EventScanResult.interfaces", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanResult.interfaces", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[dict[str, object]]"}, {"fullname": "src.capgate_types.brain.event_types.EventScanResult.devices", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanResult.devices", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[dict[str, object]]"}, {"fullname": "src.capgate_types.brain.event_types.EventScanResult.credentials", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanResult.credentials", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[dict[str, object]]"}, {"fullname": "src.capgate_types.brain.event_types.EventScanResult.metadata", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanResult.metadata", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[dict[str, object]]"}, {"fullname": "src.capgate_types.brain.event_types.EventScanResult.events", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanResult.events", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[src.capgate_types.brain.event_types.EventData]"}, {"fullname": "src.capgate_types.brain.event_types.EventScanResult.timestamp", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanResult.timestamp", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.capgate_types.brain.event_types.EventScanResult.source", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanResult.source", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.capgate_types.brain.event_types.EventScanSummary", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanSummary", "kind": "class", "doc": "<p></p>\n", "bases": "typing.TypedDict"}, {"fullname": "src.capgate_types.brain.event_types.EventScanSummary.total_interfaces", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanSummary.total_interfaces", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.brain.event_types.EventScanSummary.total_devices", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanSummary.total_devices", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.brain.event_types.EventScanSummary.total_credentials", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanSummary.total_credentials", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.brain.event_types.EventScanSummary.total_metadata", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanSummary.total_metadata", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.brain.event_types.EventScanSummary.scan_duration", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanSummary.scan_duration", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.capgate_types.brain.event_types.EventScanSummary.timestamp", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanSummary.timestamp", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.capgate_types.brain.event_types.EventScanSummary.source", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanSummary.source", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.capgate_types.brain.event_types.EventScanError", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanError", "kind": "class", "doc": "<p></p>\n", "bases": "typing.TypedDict"}, {"fullname": "src.capgate_types.brain.event_types.EventScanError.error_type", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanError.error_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.capgate_types.brain.event_types.EventScanError.message", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanError.message", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.capgate_types.brain.event_types.EventScanError.timestamp", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanError.timestamp", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.capgate_types.brain.event_types.EventScanError.source", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanError.source", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.capgate_types.brain.event_types.EventScanError.context", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanError.context", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, object]"}, {"fullname": "src.capgate_types.brain.event_types.EventScanConfig", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanConfig", "kind": "class", "doc": "<p></p>\n", "bases": "typing.TypedDict"}, {"fullname": "src.capgate_types.brain.event_types.EventScanConfig.interface", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanConfig.interface", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, object]"}, {"fullname": "src.capgate_types.brain.event_types.EventScanConfig.device", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanConfig.device", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, object]"}, {"fullname": "src.capgate_types.brain.event_types.EventScanConfig.credential", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanConfig.credential", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, object]"}, {"fullname": "src.capgate_types.brain.event_types.EventScanConfig.metadata", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanConfig.metadata", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, object]"}, {"fullname": "src.capgate_types.brain.event_types.EventScanConfig.flat_event", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanConfig.flat_event", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, object]"}, {"fullname": "src.capgate_types.brain.event_types.EventScanConfig.event_summary", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanConfig.event_summary", "kind": "variable", "doc": "<p></p>\n", "annotation": ": src.capgate_types.brain.event_types.EventSummary"}, {"fullname": "src.capgate_types.brain.event_types.EventScanResultSummary", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanResultSummary", "kind": "class", "doc": "<p></p>\n", "bases": "typing.TypedDict"}, {"fullname": "src.capgate_types.brain.event_types.EventScanResultSummary.total_interfaces", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanResultSummary.total_interfaces", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.brain.event_types.EventScanResultSummary.total_devices", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanResultSummary.total_devices", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.brain.event_types.EventScanResultSummary.total_credentials", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanResultSummary.total_credentials", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.brain.event_types.EventScanResultSummary.total_metadata", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanResultSummary.total_metadata", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.brain.event_types.EventScanResultSummary.total_events", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanResultSummary.total_events", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.brain.event_types.EventScanResultSummary.scan_duration", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanResultSummary.scan_duration", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.capgate_types.brain.event_types.EventScanResultSummary.timestamp", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanResultSummary.timestamp", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.capgate_types.brain.event_types.EventScanResultSummary.source", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanResultSummary.source", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.capgate_types.brain.event_types.EventScanOptions", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanOptions", "kind": "class", "doc": "<p></p>\n", "bases": "typing.TypedDict"}, {"fullname": "src.capgate_types.brain.event_types.EventScanOptions.include_hidden", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanOptions.include_hidden", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.brain.event_types.EventScanOptions.include_inactive", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanOptions.include_inactive", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.brain.event_types.EventScanOptions.include_rogue", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanOptions.include_rogue", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.brain.event_types.EventScanOptions.include_suspicious", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanOptions.include_suspicious", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.brain.event_types.EventScanOptions.timeout", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanOptions.timeout", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.brain.event_types.EventScanOptions.max_results", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanOptions.max_results", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.brain.event_types.EventScanOptions.flat_event_format", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanOptions.flat_event_format", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.capgate_types.brain.event_types.EventScanContext", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanContext", "kind": "class", "doc": "<p></p>\n", "bases": "typing.TypedDict"}, {"fullname": "src.capgate_types.brain.event_types.EventScanContext.interfaces", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanContext.interfaces", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, object]"}, {"fullname": "src.capgate_types.brain.event_types.EventScanContext.devices", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanContext.devices", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, object]"}, {"fullname": "src.capgate_types.brain.event_types.EventScanContext.credentials", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanContext.credentials", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, object]"}, {"fullname": "src.capgate_types.brain.event_types.EventScanContext.metadata", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanContext.metadata", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, object]"}, {"fullname": "src.capgate_types.brain.event_types.EventScanContext.flat_events", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanContext.flat_events", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[src.capgate_types.brain.event_types.FlatEvent]"}, {"fullname": "src.capgate_types.brain.event_types.EventScanContext.event_log", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanContext.event_log", "kind": "variable", "doc": "<p></p>\n", "annotation": ": src.capgate_types.brain.event_types.EventLog"}, {"fullname": "src.capgate_types.brain.event_types.EventScanContext.event_summary", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanContext.event_summary", "kind": "variable", "doc": "<p></p>\n", "annotation": ": src.capgate_types.brain.event_types.EventSummary"}, {"fullname": "src.capgate_types.brain.event_types.EventScanContextData", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanContextData", "kind": "class", "doc": "<p></p>\n", "bases": "typing.TypedDict"}, {"fullname": "src.capgate_types.brain.event_types.EventScanContextData.interfaces", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanContextData.interfaces", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, object]"}, {"fullname": "src.capgate_types.brain.event_types.EventScanContextData.devices", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanContextData.devices", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, object]"}, {"fullname": "src.capgate_types.brain.event_types.EventScanContextData.credentials", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanContextData.credentials", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, object]"}, {"fullname": "src.capgate_types.brain.event_types.EventScanContextData.metadata", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanContextData.metadata", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, object]"}, {"fullname": "src.capgate_types.brain.event_types.EventScanContextData.flat_events", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanContextData.flat_events", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[src.capgate_types.brain.event_types.FlatEvent]"}, {"fullname": "src.capgate_types.brain.event_types.EventScanContextData.event_log", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanContextData.event_log", "kind": "variable", "doc": "<p></p>\n", "annotation": ": src.capgate_types.brain.event_types.EventLog"}, {"fullname": "src.capgate_types.brain.event_types.EventScanContextData.event_summary", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanContextData.event_summary", "kind": "variable", "doc": "<p></p>\n", "annotation": ": src.capgate_types.brain.event_types.EventSummary"}, {"fullname": "src.capgate_types.brain.event_types.EventScanContextSummary", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanContextSummary", "kind": "class", "doc": "<p></p>\n", "bases": "typing.TypedDict"}, {"fullname": "src.capgate_types.brain.event_types.EventScanContextSummary.total_interfaces", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanContextSummary.total_interfaces", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.brain.event_types.EventScanContextSummary.total_devices", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanContextSummary.total_devices", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.brain.event_types.EventScanContextSummary.total_credentials", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanContextSummary.total_credentials", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.brain.event_types.EventScanContextSummary.total_metadata", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanContextSummary.total_metadata", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.brain.event_types.EventScanContextSummary.total_events", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanContextSummary.total_events", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.brain.event_types.EventScanContextSummary.scan_duration", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanContextSummary.scan_duration", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.capgate_types.brain.event_types.EventScanContextSummary.last_updated", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanContextSummary.last_updated", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.capgate_types.brain.event_types.EventScanContextSummary.source", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanContextSummary.source", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.capgate_types.brain.event_types.EventScanContextError", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanContextError", "kind": "class", "doc": "<p></p>\n", "bases": "typing.TypedDict"}, {"fullname": "src.capgate_types.brain.event_types.EventScanContextError.error_type", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanContextError.error_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.capgate_types.brain.event_types.EventScanContextError.message", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanContextError.message", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.capgate_types.brain.event_types.EventScanContextError.timestamp", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanContextError.timestamp", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.capgate_types.brain.event_types.EventScanContextError.source", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanContextError.source", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.capgate_types.brain.event_types.EventScanContextError.context", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanContextError.context", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, object]"}, {"fullname": "src.capgate_types.brain.event_types.EventScanContextConfig", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanContextConfig", "kind": "class", "doc": "<p></p>\n", "bases": "typing.TypedDict"}, {"fullname": "src.capgate_types.brain.event_types.EventScanContextConfig.interface", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanContextConfig.interface", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, object]"}, {"fullname": "src.capgate_types.brain.event_types.EventScanContextConfig.device", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanContextConfig.device", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, object]"}, {"fullname": "src.capgate_types.brain.event_types.EventScanContextConfig.credential", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanContextConfig.credential", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, object]"}, {"fullname": "src.capgate_types.brain.event_types.EventScanContextConfig.metadata", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanContextConfig.metadata", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, object]"}, {"fullname": "src.capgate_types.brain.event_types.EventScanContextConfig.flat_event", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanContextConfig.flat_event", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, object]"}, {"fullname": "src.capgate_types.brain.event_types.EventScanContextConfig.event_summary", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanContextConfig.event_summary", "kind": "variable", "doc": "<p></p>\n", "annotation": ": src.capgate_types.brain.event_types.EventSummary"}, {"fullname": "src.capgate_types.brain.event_types.EventScanContextConfig.event_log", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanContextConfig.event_log", "kind": "variable", "doc": "<p></p>\n", "annotation": ": src.capgate_types.brain.event_types.EventLog"}, {"fullname": "src.capgate_types.brain.event_types.EventScanContextOptions", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanContextOptions", "kind": "class", "doc": "<p></p>\n", "bases": "typing.TypedDict"}, {"fullname": "src.capgate_types.brain.event_types.EventScanContextOptions.include_hidden", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanContextOptions.include_hidden", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.brain.event_types.EventScanContextOptions.include_inactive", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanContextOptions.include_inactive", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.brain.event_types.EventScanContextOptions.include_rogue", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanContextOptions.include_rogue", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.brain.event_types.EventScanContextOptions.include_suspicious", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanContextOptions.include_suspicious", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.brain.event_types.EventScanContextOptions.timeout", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanContextOptions.timeout", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.brain.event_types.EventScanContextOptions.max_results", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanContextOptions.max_results", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.brain.event_types.EventScanContextOptions.flat_event_format", "modulename": "src.capgate_types.brain.event_types", "qualname": "EventScanContextOptions.flat_event_format", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.capgate_types.core", "modulename": "src.capgate_types.core", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.capgate_types.core.context_types", "modulename": "src.capgate_types.core.context_types", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.capgate_types.core.context_types.InterfaceData", "modulename": "src.capgate_types.core.context_types", "qualname": "InterfaceData", "kind": "class", "doc": "<p></p>\n", "bases": "typing_extensions.TypedDict"}, {"fullname": "src.capgate_types.core.context_types.InterfaceData.name", "modulename": "src.capgate_types.core.context_types", "qualname": "InterfaceData.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.capgate_types.core.context_types.InterfaceData.mac", "modulename": "src.capgate_types.core.context_types", "qualname": "InterfaceData.mac", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.capgate_types.core.context_types.InterfaceData.mode", "modulename": "src.capgate_types.core.context_types", "qualname": "InterfaceData.mode", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.capgate_types.core.context_types.InterfaceData.driver", "modulename": "src.capgate_types.core.context_types", "qualname": "InterfaceData.driver", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.capgate_types.core.context_types.InterfaceData.signal_quality", "modulename": "src.capgate_types.core.context_types", "qualname": "InterfaceData.signal_quality", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "src.capgate_types.core.context_types.InterfaceData.supports_monitor", "modulename": "src.capgate_types.core.context_types", "qualname": "InterfaceData.supports_monitor", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.core.context_types.InterfaceData.supports_5ghz", "modulename": "src.capgate_types.core.context_types", "qualname": "InterfaceData.supports_5ghz", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.core.context_types.InterfaceData.supports_6ghz", "modulename": "src.capgate_types.core.context_types", "qualname": "InterfaceData.supports_6ghz", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.core.context_types.InterfaceData.supports_24ghz", "modulename": "src.capgate_types.core.context_types", "qualname": "InterfaceData.supports_24ghz", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.core.context_types.InterfaceData.supports_60ghz", "modulename": "src.capgate_types.core.context_types", "qualname": "InterfaceData.supports_60ghz", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.core.context_types.InterfaceData.supports_80211ac", "modulename": "src.capgate_types.core.context_types", "qualname": "InterfaceData.supports_80211ac", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.core.context_types.InterfaceData.supports_80211ax", "modulename": "src.capgate_types.core.context_types", "qualname": "InterfaceData.supports_80211ax", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.core.context_types.InterfaceData.supports_80211ad", "modulename": "src.capgate_types.core.context_types", "qualname": "InterfaceData.supports_80211ad", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.core.context_types.InterfaceData.supports_80211be", "modulename": "src.capgate_types.core.context_types", "qualname": "InterfaceData.supports_80211be", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.core.context_types.InterfaceData.supports_80211ah", "modulename": "src.capgate_types.core.context_types", "qualname": "InterfaceData.supports_80211ah", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.core.context_types.InterfaceData.supports_80211af", "modulename": "src.capgate_types.core.context_types", "qualname": "InterfaceData.supports_80211af", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.core.context_types.InterfaceData.supports_80211bgn", "modulename": "src.capgate_types.core.context_types", "qualname": "InterfaceData.supports_80211bgn", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.core.context_types.InterfaceData.supports_80211bg", "modulename": "src.capgate_types.core.context_types", "qualname": "InterfaceData.supports_80211bg", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.core.context_types.InterfaceData.supports_80211n", "modulename": "src.capgate_types.core.context_types", "qualname": "InterfaceData.supports_80211n", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.core.context_types.InterfaceData.supports_80211g", "modulename": "src.capgate_types.core.context_types", "qualname": "InterfaceData.supports_80211g", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.core.context_types.InterfaceData.supports_80211b", "modulename": "src.capgate_types.core.context_types", "qualname": "InterfaceData.supports_80211b", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.core.context_types.InterfaceData.supports_80211a", "modulename": "src.capgate_types.core.context_types", "qualname": "InterfaceData.supports_80211a", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.core.context_types.InterfaceData.supports_2ghz", "modulename": "src.capgate_types.core.context_types", "qualname": "InterfaceData.supports_2ghz", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.core.context_types.InterfaceData.supports_11n", "modulename": "src.capgate_types.core.context_types", "qualname": "InterfaceData.supports_11n", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.core.context_types.InterfaceData.supports_11g", "modulename": "src.capgate_types.core.context_types", "qualname": "InterfaceData.supports_11g", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.core.context_types.InterfaceData.supports_11b", "modulename": "src.capgate_types.core.context_types", "qualname": "InterfaceData.supports_11b", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.core.context_types.InterfaceData.supports_11a", "modulename": "src.capgate_types.core.context_types", "qualname": "InterfaceData.supports_11a", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.core.context_types.DeviceData", "modulename": "src.capgate_types.core.context_types", "qualname": "DeviceData", "kind": "class", "doc": "<p></p>\n", "bases": "typing_extensions.TypedDict"}, {"fullname": "src.capgate_types.core.context_types.DeviceData.mac", "modulename": "src.capgate_types.core.context_types", "qualname": "DeviceData.mac", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.capgate_types.core.context_types.DeviceData.vendor", "modulename": "src.capgate_types.core.context_types", "qualname": "DeviceData.vendor", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.capgate_types.core.context_types.DeviceData.signal_strength", "modulename": "src.capgate_types.core.context_types", "qualname": "DeviceData.signal_strength", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "src.capgate_types.core.context_types.DeviceData.is_router", "modulename": "src.capgate_types.core.context_types", "qualname": "DeviceData.is_router", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.core.context_types.DeviceData.last_seen", "modulename": "src.capgate_types.core.context_types", "qualname": "DeviceData.last_seen", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.capgate_types.core.context_types.CredentialData", "modulename": "src.capgate_types.core.context_types", "qualname": "CredentialData", "kind": "class", "doc": "<p></p>\n", "bases": "typing_extensions.TypedDict"}, {"fullname": "src.capgate_types.core.context_types.CredentialData.id", "modulename": "src.capgate_types.core.context_types", "qualname": "CredentialData.id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.capgate_types.core.context_types.CredentialData.type", "modulename": "src.capgate_types.core.context_types", "qualname": "CredentialData.type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.capgate_types.core.context_types.CredentialData.value", "modulename": "src.capgate_types.core.context_types", "qualname": "CredentialData.value", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.capgate_types.core.context_types.CredentialData.cracked", "modulename": "src.capgate_types.core.context_types", "qualname": "CredentialData.cracked", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.core.context_types.CredentialData.source", "modulename": "src.capgate_types.core.context_types", "qualname": "CredentialData.source", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.capgate_types.core.context_types.MetadataEntry", "modulename": "src.capgate_types.core.context_types", "qualname": "MetadataEntry", "kind": "class", "doc": "<p></p>\n", "bases": "typing_extensions.TypedDict"}, {"fullname": "src.capgate_types.core.context_types.MetadataEntry.plugin", "modulename": "src.capgate_types.core.context_types", "qualname": "MetadataEntry.plugin", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.capgate_types.core.context_types.MetadataEntry.status", "modulename": "src.capgate_types.core.context_types", "qualname": "MetadataEntry.status", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.capgate_types.core.context_types.MetadataEntry.updated", "modulename": "src.capgate_types.core.context_types", "qualname": "MetadataEntry.updated", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.capgate_types.core.context_types.EventType", "modulename": "src.capgate_types.core.context_types", "qualname": "EventType", "kind": "variable", "doc": "<p></p>\n", "default_value": "typing.Literal[&#x27;interface&#x27;, &#x27;device&#x27;, &#x27;credential&#x27;, &#x27;meta&#x27;]"}, {"fullname": "src.capgate_types.core.context_types.EventLogEntry", "modulename": "src.capgate_types.core.context_types", "qualname": "EventLogEntry", "kind": "class", "doc": "<p></p>\n", "bases": "typing_extensions.TypedDict"}, {"fullname": "src.capgate_types.core.context_types.EventLogEntry.timestamp", "modulename": "src.capgate_types.core.context_types", "qualname": "EventLogEntry.timestamp", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.capgate_types.core.context_types.EventLogEntry.type", "modulename": "src.capgate_types.core.context_types", "qualname": "EventLogEntry.type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Literal[&#x27;interface&#x27;, &#x27;device&#x27;, &#x27;credential&#x27;, &#x27;meta&#x27;]"}, {"fullname": "src.capgate_types.core.context_types.EventLogEntry.id", "modulename": "src.capgate_types.core.context_types", "qualname": "EventLogEntry.id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.capgate_types.core.context_types.EventLogEntry.data", "modulename": "src.capgate_types.core.context_types", "qualname": "EventLogEntry.data", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, object]"}, {"fullname": "src.capgate_types.core.context_types.AppContextData", "modulename": "src.capgate_types.core.context_types", "qualname": "AppContextData", "kind": "class", "doc": "<p></p>\n", "bases": "typing_extensions.TypedDict"}, {"fullname": "src.capgate_types.core.context_types.AppContextData.interfaces", "modulename": "src.capgate_types.core.context_types", "qualname": "AppContextData.interfaces", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, src.capgate_types.core.context_types.InterfaceData]"}, {"fullname": "src.capgate_types.core.context_types.AppContextData.devices", "modulename": "src.capgate_types.core.context_types", "qualname": "AppContextData.devices", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, src.capgate_types.core.context_types.DeviceData]"}, {"fullname": "src.capgate_types.core.context_types.AppContextData.credentials", "modulename": "src.capgate_types.core.context_types", "qualname": "AppContextData.credentials", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, src.capgate_types.core.context_types.CredentialData]"}, {"fullname": "src.capgate_types.core.context_types.AppContextData.metadata", "modulename": "src.capgate_types.core.context_types", "qualname": "AppContextData.metadata", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, src.capgate_types.core.context_types.MetadataEntry]"}, {"fullname": "src.capgate_types.core.context_types.AppContextData.event_log", "modulename": "src.capgate_types.core.context_types", "qualname": "AppContextData.event_log", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[src.capgate_types.core.context_types.EventLogEntry]"}, {"fullname": "src.capgate_types.core.context_types.AppContextData.store", "modulename": "src.capgate_types.core.context_types", "qualname": "AppContextData.store", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, typing.Union[str, int, float, bool, NoneType]]"}, {"fullname": "src.capgate_types.db", "modulename": "src.capgate_types.db", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.capgate_types.db.schemas", "modulename": "src.capgate_types.db.schemas", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.capgate_types.db.schemas.device_types", "modulename": "src.capgate_types.db.schemas.device_types", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema", "kind": "class", "doc": "<p></p>\n", "bases": "typing.TypedDict"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.mac", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.mac", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.vendor", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.vendor", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.signal_strength", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.signal_strength", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_router", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_router", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.last_seen", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.last_seen", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_active", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_active", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_tracked", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_tracked", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_ignored", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_ignored", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_blocked", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_blocked", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_whitelisted", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_whitelisted", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_blacklisted", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_blacklisted", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_suspicious", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_suspicious", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_known", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_known", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_new", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_new", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_rogue", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_rogue", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_hidden", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_hidden", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_guest", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_guest", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_persistent", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_persistent", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_critical", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_critical", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_vulnerable", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_vulnerable", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_exploited", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_exploited", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_compromised", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_compromised", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_malicious", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_malicious", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_anomalous", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_anomalous", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_inactive", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_inactive", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_offline", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_offline", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_online", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_online", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_connected", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_connected", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_disconnected", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_disconnected", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_authenticated", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_authenticated", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_deauthenticated", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_deauthenticated", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_roaming", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_roaming", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_station", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_station", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_ap", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_ap", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_client", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_client", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_server", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_server", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_bridge", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_bridge", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_repeater", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_repeater", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_gateway", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_gateway", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_switch", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_switch", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_router_mode", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_router_mode", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_access_point", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_access_point", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_mesh_node", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_mesh_node", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_iot_device", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_iot_device", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_smart_device", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_smart_device", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_printer", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_printer", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_camera", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_camera", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_speaker", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_speaker", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_tv", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_tv", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_laptop", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_laptop", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_desktop", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_desktop", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_mobile", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_mobile", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_tablet", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_tablet", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_wearable", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_wearable", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSchema.is_vehicle", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSchema.is_vehicle", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema", "kind": "class", "doc": "<p></p>\n", "bases": "typing.TypedDict"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.mac", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.mac", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.vendor", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.vendor", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.signal_strength", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.signal_strength", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_router", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_router", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.last_seen", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.last_seen", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_active", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_active", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_tracked", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_tracked", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_ignored", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_ignored", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_blocked", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_blocked", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_whitelisted", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_whitelisted", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_blacklisted", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_blacklisted", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_suspicious", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_suspicious", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_known", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_known", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_new", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_new", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_rogue", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_rogue", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_hidden", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_hidden", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_guest", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_guest", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_persistent", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_persistent", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_critical", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_critical", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_vulnerable", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_vulnerable", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_exploited", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_exploited", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_compromised", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_compromised", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_malicious", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_malicious", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_anomalous", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_anomalous", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_inactive", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_inactive", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_offline", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_offline", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_online", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_online", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_connected", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_connected", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_disconnected", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_disconnected", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_authenticated", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_authenticated", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_deauthenticated", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_deauthenticated", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_roaming", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_roaming", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_station", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_station", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_ap", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_ap", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_client", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_client", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_server", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_server", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_bridge", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_bridge", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_repeater", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_repeater", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_gateway", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_gateway", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_switch", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_switch", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_router_mode", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_router_mode", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_access_point", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_access_point", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_mesh_node", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_mesh_node", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_iot_device", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_iot_device", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_smart_device", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_smart_device", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_printer", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_printer", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_camera", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_camera", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_speaker", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_speaker", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_tv", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_tv", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_laptop", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_laptop", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_desktop", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_desktop", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_mobile", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_mobile", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_tablet", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_tablet", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_wearable", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_wearable", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceUpdateSchema.is_vehicle", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceUpdateSchema.is_vehicle", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema", "kind": "class", "doc": "<p></p>\n", "bases": "typing.TypedDict"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.mac", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.mac", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.vendor", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.vendor", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.signal_strength", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.signal_strength", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_router", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_router", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.last_seen", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.last_seen", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_active", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_active", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_tracked", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_tracked", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_ignored", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_ignored", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_blocked", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_blocked", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_whitelisted", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_whitelisted", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_blacklisted", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_blacklisted", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_suspicious", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_suspicious", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_known", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_known", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_new", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_new", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_rogue", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_rogue", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_hidden", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_hidden", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_guest", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_guest", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_persistent", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_persistent", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_critical", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_critical", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_vulnerable", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_vulnerable", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_exploited", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_exploited", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_compromised", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_compromised", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_malicious", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_malicious", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_anomalous", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_anomalous", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_inactive", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_inactive", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_offline", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_offline", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_online", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_online", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_connected", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_connected", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_disconnected", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_disconnected", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_authenticated", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_authenticated", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_deauthenticated", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_deauthenticated", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_roaming", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_roaming", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_station", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_station", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_ap", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_ap", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_client", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_client", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_server", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_server", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_bridge", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_bridge", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_repeater", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_repeater", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_gateway", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_gateway", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_switch", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_switch", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_router_mode", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_router_mode", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_access_point", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_access_point", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_mesh_node", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_mesh_node", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_iot_device", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_iot_device", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_smart_device", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_smart_device", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_printer", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_printer", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_camera", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_camera", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_speaker", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_speaker", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_tv", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_tv", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_laptop", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_laptop", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_desktop", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_desktop", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_mobile", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_mobile", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_tablet", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_tablet", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_wearable", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_wearable", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceCreateSchema.is_vehicle", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceCreateSchema.is_vehicle", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceDeleteSchema", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceDeleteSchema", "kind": "class", "doc": "<p></p>\n", "bases": "typing.TypedDict"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceDeleteSchema.mac", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceDeleteSchema.mac", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceDeleteSchema.is_active", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceDeleteSchema.is_active", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema", "kind": "class", "doc": "<p></p>\n", "bases": "typing.TypedDict"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.mac", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.mac", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.vendor", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.vendor", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.signal_strength", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.signal_strength", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_router", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_router", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.last_seen", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.last_seen", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_active", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_active", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_tracked", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_tracked", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_ignored", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_ignored", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_blocked", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_blocked", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_whitelisted", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_whitelisted", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_blacklisted", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_blacklisted", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_suspicious", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_suspicious", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_known", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_known", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_new", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_new", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_rogue", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_rogue", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_hidden", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_hidden", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_guest", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_guest", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_persistent", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_persistent", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_critical", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_critical", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_vulnerable", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_vulnerable", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_exploited", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_exploited", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_compromised", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_compromised", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_malicious", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_malicious", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_anomalous", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_anomalous", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_inactive", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_inactive", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_offline", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_offline", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_online", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_online", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_connected", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_connected", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_disconnected", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_disconnected", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_authenticated", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_authenticated", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_deauthenticated", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_deauthenticated", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_roaming", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_roaming", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_station", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_station", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_ap", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_ap", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_client", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_client", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_server", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_server", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_bridge", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_bridge", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_repeater", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_repeater", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_gateway", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_gateway", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_switch", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_switch", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_router_mode", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_router_mode", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_access_point", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_access_point", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_mesh_node", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_mesh_node", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_iot_device", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_iot_device", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_smart_device", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_smart_device", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_printer", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_printer", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_camera", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_camera", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_speaker", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_speaker", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_tv", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_tv", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_laptop", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_laptop", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_desktop", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_desktop", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_mobile", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_mobile", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_tablet", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_tablet", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_wearable", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_wearable", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceFilterSchema.is_vehicle", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceFilterSchema.is_vehicle", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceListSchema", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceListSchema", "kind": "class", "doc": "<p></p>\n", "bases": "typing.TypedDict"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceListSchema.devices", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceListSchema.devices", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[src.capgate_types.db.schemas.device_types.DeviceSchema]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceListSchema.total_count", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceListSchema.total_count", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceListSchema.page", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceListSchema.page", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceListSchema.page_size", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceListSchema.page_size", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceListSchema.total_pages", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceListSchema.total_pages", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceListSchema.filters", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceListSchema.filters", "kind": "variable", "doc": "<p></p>\n", "annotation": ": src.capgate_types.db.schemas.device_types.DeviceFilterSchema"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceListSchema.sort_by", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceListSchema.sort_by", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceListSchema.sort_order", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceListSchema.sort_order", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceStatsSchema", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceStatsSchema", "kind": "class", "doc": "<p></p>\n", "bases": "typing.TypedDict"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceStatsSchema.total_devices", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceStatsSchema.total_devices", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceStatsSchema.active_devices", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceStatsSchema.active_devices", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceStatsSchema.inactive_devices", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceStatsSchema.inactive_devices", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceStatsSchema.rogue_devices", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceStatsSchema.rogue_devices", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceStatsSchema.suspicious_devices", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceStatsSchema.suspicious_devices", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceStatsSchema.blocked_devices", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceStatsSchema.blocked_devices", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceStatsSchema.whitelisted_devices", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceStatsSchema.whitelisted_devices", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceStatsSchema.blacklisted_devices", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceStatsSchema.blacklisted_devices", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceStatsSchema.critical_devices", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceStatsSchema.critical_devices", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceStatsSchema.vulnerable_devices", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceStatsSchema.vulnerable_devices", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceStatsSchema.compromised_devices", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceStatsSchema.compromised_devices", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceStatsSchema.malicious_devices", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceStatsSchema.malicious_devices", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceStatsSchema.anomalous_devices", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceStatsSchema.anomalous_devices", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceStatsSchema.last_updated", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceStatsSchema.last_updated", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceEventSchema", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceEventSchema", "kind": "class", "doc": "<p></p>\n", "bases": "typing.TypedDict"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceEventSchema.timestamp", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceEventSchema.timestamp", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceEventSchema.type", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceEventSchema.type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceEventSchema.device", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceEventSchema.device", "kind": "variable", "doc": "<p></p>\n", "annotation": ": src.capgate_types.db.schemas.device_types.DeviceSchema"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceEventSchema.source", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceEventSchema.source", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceEventSchema.context", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceEventSchema.context", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[dict[str, object]]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceEventLogSchema", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceEventLogSchema", "kind": "class", "doc": "<p></p>\n", "bases": "typing.TypedDict"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceEventLogSchema.events", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceEventLogSchema.events", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[src.capgate_types.db.schemas.device_types.DeviceEventSchema]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceEventLogSchema.total_count", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceEventLogSchema.total_count", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceEventLogSchema.page", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceEventLogSchema.page", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceEventLogSchema.page_size", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceEventLogSchema.page_size", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceEventLogSchema.total_pages", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceEventLogSchema.total_pages", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceEventLogSchema.filters", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceEventLogSchema.filters", "kind": "variable", "doc": "<p></p>\n", "annotation": ": src.capgate_types.db.schemas.device_types.DeviceFilterSchema"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceEventLogSchema.sort_by", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceEventLogSchema.sort_by", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceEventLogSchema.sort_order", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceEventLogSchema.sort_order", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSearchSchema", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSearchSchema", "kind": "class", "doc": "<p></p>\n", "bases": "typing.TypedDict"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSearchSchema.query", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSearchSchema.query", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSearchSchema.filters", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSearchSchema.filters", "kind": "variable", "doc": "<p></p>\n", "annotation": ": src.capgate_types.db.schemas.device_types.DeviceFilterSchema"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSearchSchema.sort_by", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSearchSchema.sort_by", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSearchSchema.sort_order", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSearchSchema.sort_order", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSearchSchema.page", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSearchSchema.page", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSearchSchema.page_size", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSearchSchema.page_size", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSearchSchema.total_count", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSearchSchema.total_count", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceSearchSchema.total_pages", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceSearchSchema.total_pages", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanResultSchema", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanResultSchema", "kind": "class", "doc": "<p></p>\n", "bases": "typing.TypedDict"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanResultSchema.devices", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanResultSchema.devices", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[src.capgate_types.db.schemas.device_types.DeviceSchema]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanResultSchema.total_count", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanResultSchema.total_count", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanResultSchema.scan_duration", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanResultSchema.scan_duration", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanResultSchema.timestamp", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanResultSchema.timestamp", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanResultSchema.source", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanResultSchema.source", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanResultSchema.context", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanResultSchema.context", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[dict[str, object]]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanSummarySchema", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanSummarySchema", "kind": "class", "doc": "<p></p>\n", "bases": "typing.TypedDict"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanSummarySchema.total_devices", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanSummarySchema.total_devices", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanSummarySchema.active_devices", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanSummarySchema.active_devices", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanSummarySchema.inactive_devices", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanSummarySchema.inactive_devices", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanSummarySchema.rogue_devices", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanSummarySchema.rogue_devices", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanSummarySchema.suspicious_devices", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanSummarySchema.suspicious_devices", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanSummarySchema.blocked_devices", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanSummarySchema.blocked_devices", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanSummarySchema.whitelisted_devices", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanSummarySchema.whitelisted_devices", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanSummarySchema.blacklisted_devices", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanSummarySchema.blacklisted_devices", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanSummarySchema.critical_devices", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanSummarySchema.critical_devices", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanSummarySchema.vulnerable_devices", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanSummarySchema.vulnerable_devices", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanSummarySchema.compromised_devices", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanSummarySchema.compromised_devices", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanSummarySchema.malicious_devices", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanSummarySchema.malicious_devices", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanSummarySchema.anomalous_devices", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanSummarySchema.anomalous_devices", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanSummarySchema.scan_duration", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanSummarySchema.scan_duration", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanSummarySchema.timestamp", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanSummarySchema.timestamp", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanSummarySchema.source", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanSummarySchema.source", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanErrorSchema", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanErrorSchema", "kind": "class", "doc": "<p></p>\n", "bases": "typing.TypedDict"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanErrorSchema.error_type", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanErrorSchema.error_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanErrorSchema.message", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanErrorSchema.message", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanErrorSchema.timestamp", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanErrorSchema.timestamp", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanErrorSchema.source", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanErrorSchema.source", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanErrorSchema.context", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanErrorSchema.context", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[dict[str, object]]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanConfigSchema", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanConfigSchema", "kind": "class", "doc": "<p></p>\n", "bases": "typing.TypedDict"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanConfigSchema.scan_interval", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanConfigSchema.scan_interval", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanConfigSchema.scan_timeout", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanConfigSchema.scan_timeout", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanConfigSchema.include_hidden", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanConfigSchema.include_hidden", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanConfigSchema.include_inactive", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanConfigSchema.include_inactive", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanConfigSchema.include_rogue", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanConfigSchema.include_rogue", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanConfigSchema.include_suspicious", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanConfigSchema.include_suspicious", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanConfigSchema.filters", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanConfigSchema.filters", "kind": "variable", "doc": "<p></p>\n", "annotation": ": src.capgate_types.db.schemas.device_types.DeviceFilterSchema"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanConfigSchema.sort_by", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanConfigSchema.sort_by", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanConfigSchema.sort_order", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanConfigSchema.sort_order", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanOptionsSchema", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanOptionsSchema", "kind": "class", "doc": "<p></p>\n", "bases": "typing.TypedDict"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanOptionsSchema.include_hidden", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanOptionsSchema.include_hidden", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanOptionsSchema.include_inactive", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanOptionsSchema.include_inactive", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanOptionsSchema.include_rogue", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanOptionsSchema.include_rogue", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanOptionsSchema.include_suspicious", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanOptionsSchema.include_suspicious", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanOptionsSchema.timeout", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanOptionsSchema.timeout", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanOptionsSchema.page", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanOptionsSchema.page", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanOptionsSchema.page_size", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanOptionsSchema.page_size", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanOptionsSchema.total_count", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanOptionsSchema.total_count", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanOptionsSchema.total_pages", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanOptionsSchema.total_pages", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanFilterSchema", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanFilterSchema", "kind": "class", "doc": "<p></p>\n", "bases": "typing.TypedDict"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanFilterSchema.device_type", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanFilterSchema.device_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanFilterSchema.os", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanFilterSchema.os", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanFilterSchema.last_seen", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanFilterSchema.last_seen", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[dict[str, float]]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanFilterSchema.status", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanFilterSchema.status", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanFilterSchema.tags", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanFilterSchema.tags", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[list[str]]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanResultListSchema", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanResultListSchema", "kind": "class", "doc": "<p></p>\n", "bases": "typing.TypedDict"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanResultListSchema.devices", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanResultListSchema.devices", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[src.capgate_types.db.schemas.device_types.DeviceScanResultSchema]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanResultListSchema.total_count", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanResultListSchema.total_count", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanResultListSchema.page", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanResultListSchema.page", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanResultListSchema.page_size", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanResultListSchema.page_size", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanResultListSchema.total_pages", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanResultListSchema.total_pages", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanResultListSchema.filters", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanResultListSchema.filters", "kind": "variable", "doc": "<p></p>\n", "annotation": ": src.capgate_types.db.schemas.device_types.DeviceScanFilterSchema"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanResultListSchema.sort_by", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanResultListSchema.sort_by", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanResultListSchema.sort_order", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanResultListSchema.sort_order", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanResultListSchema.context", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanResultListSchema.context", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[dict[str, object]]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanEventSchema", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanEventSchema", "kind": "class", "doc": "<p></p>\n", "bases": "typing.TypedDict"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanEventSchema.timestamp", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanEventSchema.timestamp", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanEventSchema.type", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanEventSchema.type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanEventSchema.data", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanEventSchema.data", "kind": "variable", "doc": "<p></p>\n", "annotation": ": src.capgate_types.db.schemas.device_types.DeviceScanResultSchema"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanEventSchema.source", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanEventSchema.source", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanEventSchema.context", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanEventSchema.context", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[dict[str, object]]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanEventLogSchema", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanEventLogSchema", "kind": "class", "doc": "<p></p>\n", "bases": "typing.TypedDict"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanEventLogSchema.events", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanEventLogSchema.events", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[src.capgate_types.db.schemas.device_types.DeviceScanEventSchema]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanEventLogSchema.total_count", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanEventLogSchema.total_count", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanEventLogSchema.page", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanEventLogSchema.page", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanEventLogSchema.page_size", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanEventLogSchema.page_size", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanEventLogSchema.total_pages", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanEventLogSchema.total_pages", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanEventLogSchema.filters", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanEventLogSchema.filters", "kind": "variable", "doc": "<p></p>\n", "annotation": ": src.capgate_types.db.schemas.device_types.DeviceScanFilterSchema"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanEventLogSchema.sort_by", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanEventLogSchema.sort_by", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.capgate_types.db.schemas.device_types.DeviceScanEventLogSchema.sort_order", "modulename": "src.capgate_types.db.schemas.device_types", "qualname": "DeviceScanEventLogSchema.sort_order", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.capgate_types.vision", "modulename": "src.capgate_types.vision", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.cli", "modulename": "src.cli", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.cli.capgate_cli", "modulename": "src.cli.capgate_cli", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.cli.capgate_cli.logger", "modulename": "src.cli.capgate_cli", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger src.cli.capgate_cli (WARNING)&gt;"}, {"fullname": "src.cli.capgate_cli.app", "modulename": "src.cli.capgate_cli", "qualname": "app", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typer.main.Typer", "default_value": "&lt;typer.main.Typer object&gt;"}, {"fullname": "src.cli.capgate_cli.console", "modulename": "src.cli.capgate_cli", "qualname": "console", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;console width=129 None&gt;"}, {"fullname": "src.cli.capgate_cli.set_global_runner", "modulename": "src.cli.capgate_cli", "qualname": "set_global_runner", "kind": "function", "doc": "<p>Sets the globally managed CapGateRunner instance for the CLI.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">runner</span><span class=\"p\">:</span> <span class=\"n\">runner</span><span class=\"o\">.</span><span class=\"n\">CapGateRunner</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.cli.capgate_cli.get_global_runner", "modulename": "src.cli.capgate_cli", "qualname": "get_global_runner", "kind": "function", "doc": "<p>Returns the globally managed CapGateRunner instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">runner</span><span class=\"o\">.</span><span class=\"n\">CapGateRunner</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.cli.capgate_cli.main_callback", "modulename": "src.cli.capgate_cli", "qualname": "main_callback", "kind": "function", "doc": "<p>Main CLI entrypoint. Initializes global CLI options.\nThe CapGateRunner is now initialized by the root main.py and injected via set_global_runner.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ctx</span><span class=\"p\">:</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Context</span>,</span><span class=\"param\">\t<span class=\"n\">mock</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">OptionInfo</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">auto</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">OptionInfo</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.cli.capgate_cli.boot", "modulename": "src.cli.capgate_cli", "qualname": "boot", "kind": "function", "doc": "<p>Launch the animated CapGate boot sequence.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.cli.capgate_cli.version", "modulename": "src.cli.capgate_cli", "qualname": "version", "kind": "function", "doc": "<p>Display the current current version of CapGate.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.cli.capgate_cli.interfaces", "modulename": "src.cli.capgate_cli", "qualname": "interfaces", "kind": "function", "doc": "<p>List network interfaces, filtered by type or mode.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">wireless_only</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">OptionInfo</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">monitor_only</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">OptionInfo</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">up_only</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">OptionInfo</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.cli.capgate_cli.plugins", "modulename": "src.cli.capgate_cli", "qualname": "plugins", "kind": "function", "doc": "<p>List all available CapGate plugins.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.cli.capgate_cli.run_command", "modulename": "src.cli.capgate_cli", "qualname": "run_command", "kind": "function", "doc": "<p>Run a plugin with optional arguments.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">plugin_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">plugin_args</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ArgumentInfo</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.cli.capgate_cli.create_plugin_command", "modulename": "src.cli.capgate_cli", "qualname": "create_plugin_command", "kind": "function", "doc": "<p>Generate a plugin using the boilerplate template.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">author</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">OptionInfo</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.cli.capgate_cli.agent_ask_command", "modulename": "src.cli.capgate_cli", "qualname": "agent_ask_command", "kind": "function", "doc": "<p>Ask the MCP AI Agent a question or give it a task.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ArgumentInfo</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.cli.capgate_cli.agent_interactive_command", "modulename": "src.cli.capgate_cli", "qualname": "agent_interactive_command", "kind": "function", "doc": "<p>Start an interactive chat session with the MCP AI Agent.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.cli.capgate_cli.agent_index_command", "modulename": "src.cli.capgate_cli", "qualname": "agent_index_command", "kind": "function", "doc": "<p>Rebuild the MCP AI Agent's knowledge base.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.cli.capgate_cli.docs_app", "modulename": "src.cli.capgate_cli", "qualname": "docs_app", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;typer.main.Typer object&gt;"}, {"fullname": "src.cli.capgate_cli.docs_build_command", "modulename": "src.cli.capgate_cli", "qualname": "docs_build_command", "kind": "function", "doc": "<p>Builds documentation for CapGate's source code using pdoc.\n(Outputs HTML by default with pdoc v13+).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">output_dir</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">OptionInfo</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">module_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">OptionInfo</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.cli.commands", "modulename": "src.cli.commands", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.cli.commands.boot", "modulename": "src.cli.commands.boot", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.cli.commands.boot.console", "modulename": "src.cli.commands.boot", "qualname": "console", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;console width=129 None&gt;"}, {"fullname": "src.cli.commands.boot.fig", "modulename": "src.cli.commands.boot", "qualname": "fig", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;pyfiglet.Figlet object&gt;"}, {"fullname": "src.cli.commands.boot.boot_sequence", "modulename": "src.cli.commands.boot", "qualname": "boot_sequence", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.cli.commands.debug_commands", "modulename": "src.cli.commands.debug_commands", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.cli.commands.debug_commands.debug_cli", "modulename": "src.cli.commands.debug_commands", "qualname": "debug_cli", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;typer.main.Typer object&gt;"}, {"fullname": "src.cli.commands.debug_commands.show_state", "modulename": "src.cli.commands.debug_commands", "qualname": "show_state", "kind": "function", "doc": "<p>Show the current AppState snapshot.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.cli.commands.debug_commands.inspect_context", "modulename": "src.cli.commands.debug_commands", "qualname": "inspect_context", "kind": "function", "doc": "<p>Show the current CapGateContext session metadata.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.cli.graph", "modulename": "src.cli.graph", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.cli.graph.app", "modulename": "src.cli.graph", "qualname": "app", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;typer.main.Typer object&gt;"}, {"fullname": "src.cli.graph.console", "modulename": "src.cli.graph", "qualname": "console", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;console width=129 None&gt;"}, {"fullname": "src.cli.graph.DEFAULT_DISCOVERY_PATHS", "modulename": "src.cli.graph", "qualname": "DEFAULT_DISCOVERY_PATHS", "kind": "variable", "doc": "<p></p>\n", "default_value": "[PosixPath(&#x27;data/topology/discovery.json&#x27;), PosixPath(&#x27;capgate/data/topology/discovery.json&#x27;), PosixPath(&#x27;src/data/topology/discovery.json&#x27;), PosixPath(&#x27;/home/nexus/capgate/data/topology/discovery.json&#x27;)]"}, {"fullname": "src.cli.graph.find_discovery_file", "modulename": "src.cli.graph", "qualname": "find_discovery_file", "kind": "function", "doc": "<p>Search for discovery.json across common fallback paths or use a user-defined path.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">custom_path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.cli.graph.print_ascii_graph", "modulename": "src.cli.graph", "qualname": "print_ascii_graph", "kind": "function", "doc": "<p>Render a basic ASCII view of nodes and edges from topology JSON.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.cli.graph.show_discovery_file", "modulename": "src.cli.graph", "qualname": "show_discovery_file", "kind": "function", "doc": "<p>\ud83d\udcc2 Show or export a saved discovery topology from JSON.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ascii</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">OptionInfo</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">png</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">OptionInfo</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">discovery</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">OptionInfo</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.cli.graph.live_topology", "modulename": "src.cli.graph", "qualname": "live_topology", "kind": "function", "doc": "<p>\ud83e\udde0 Generate topology from live AppContext memory and optionally render/export it.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">export</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">OptionInfo</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">ascii</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">OptionInfo</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.config", "modulename": "src.config", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.config.config", "modulename": "src.config.config", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.config.config.CONFIG_DIR", "modulename": "src.config.config", "qualname": "CONFIG_DIR", "kind": "variable", "doc": "<p></p>\n", "default_value": "PosixPath(&#x27;/home/nexus/capgate/src/configs&#x27;)"}, {"fullname": "src.config.config.Config", "modulename": "src.config.config", "qualname": "Config", "kind": "class", "doc": "<p>Loads YAML config files and caches them for reuse.</p>\n"}, {"fullname": "src.config.config.Config.load", "modulename": "src.config.config", "qualname": "Config.load", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.config.config.Config.clear_cache", "modulename": "src.config.config", "qualname": "Config.clear_cache", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.core", "modulename": "src.core", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.core.ap_manager", "modulename": "src.core.ap_manager", "kind": "module", "doc": "<p>AP Manager: Provides high-level functions to create and manage Access Points (APs),\nprimarily using hostapd.</p>\n"}, {"fullname": "src.core.ap_manager.APManager", "modulename": "src.core.ap_manager", "qualname": "APManager", "kind": "class", "doc": "<p>Manages Access Point creation and control using hostapd.</p>\n"}, {"fullname": "src.core.ap_manager.APManager.__init__", "modulename": "src.core.ap_manager", "qualname": "APManager.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">app_state</span><span class=\"p\">:</span> <span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">state_management</span><span class=\"o\">.</span><span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">AppState</span></span>)</span>"}, {"fullname": "src.core.ap_manager.APManager.app_state", "modulename": "src.core.ap_manager", "qualname": "APManager.app_state", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.ap_manager.APManager.logger", "modulename": "src.core.ap_manager", "qualname": "APManager.logger", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.ap_manager.APManager.start_ap", "modulename": "src.core.ap_manager", "qualname": "APManager.start_ap", "kind": "function", "doc": "<p>Starts an Access Point on the given interface using hostapd.</p>\n\n<p>Args:\n    interface (str): The wireless interface to use (must not be in monitor mode).\n    ssid (str): The SSID (network name) of the AP.\n    channel (int): The channel to host the AP on.\n    hw_mode (str): Hardware mode ('g' for 2.4GHz, 'a' for 5GHz, 'n' for HT mode).\n    mac_spoof (Optional[str]): MAC address to spoof the AP's interface to.</p>\n\n<p>Returns:\n    bool: True if the AP started successfully, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">interface</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">ssid</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">channel</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">hw_mode</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">mac_spoof</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.ap_manager.APManager.stop_ap", "modulename": "src.core.ap_manager", "qualname": "APManager.stop_ap", "kind": "function", "doc": "<p>Stops the running Access Point and cleans up.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.capture_manager", "modulename": "src.core.capture_manager", "kind": "module", "doc": "<p>Provides core functionalities for capturing wireless traffic,\nincluding WPA/WPA2 handshakes using airodump-ng and aireplay-ng.</p>\n"}, {"fullname": "src.core.capture_manager.CaptureManager", "modulename": "src.core.capture_manager", "qualname": "CaptureManager", "kind": "class", "doc": "<p>Encapsulates operations related to capturing network traffic.</p>\n"}, {"fullname": "src.core.capture_manager.CaptureManager.logger", "modulename": "src.core.capture_manager", "qualname": "CaptureManager.logger", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.capture_manager.CaptureManager.capture_handshake", "modulename": "src.core.capture_manager", "qualname": "CaptureManager.capture_handshake", "kind": "function", "doc": "<p>Attempts to capture a WPA/WPA2 handshake for a given target.</p>\n\n<p>Args:\n    monitor_interface (str): The interface name in monitor mode (e.g., 'wlan0mon').\n    target_bssid (str): The BSSID of the target access point.\n    target_channel (str): The channel of the target access point.\n    output_file_prefix (str): Prefix for the .cap file (e.g., 'handshake_AP1').\n                              The actual file will be {prefix}-01.cap.\n    capture_time_seconds (int): How long to attempt capturing the handshake.\n    deauth_count (int): Number of deauthentication packets to send to force handshake.\n    auto_mode (bool): If True, will wait for <code>capture_time_seconds</code> automatically.\n                      If False, will inform user to press Ctrl+C to stop early.</p>\n\n<p>Returns:\n    Optional[str]: Full path to the captured .cap file if successful, None otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">monitor_interface</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">target_bssid</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">target_channel</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">output_file_prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">capture_time_seconds</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">30</span>,</span><span class=\"param\">\t<span class=\"n\">deauth_count</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">auto_mode</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.cracking_manager", "modulename": "src.core.cracking_manager", "kind": "module", "doc": "<p>Provides core functionalities for cracking captured network handshakes,\nprimarily using aircrack-ng.</p>\n"}, {"fullname": "src.core.cracking_manager.CrackingManager", "modulename": "src.core.cracking_manager", "qualname": "CrackingManager", "kind": "class", "doc": "<p>Encapsulates operations related to cracking captured handshakes.</p>\n"}, {"fullname": "src.core.cracking_manager.CrackingManager.logger", "modulename": "src.core.cracking_manager", "qualname": "CrackingManager.logger", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.cracking_manager.CrackingManager.find_wordlist", "modulename": "src.core.cracking_manager", "qualname": "CrackingManager.find_wordlist", "kind": "function", "doc": "<p>Intelligently finds a wordlist path.\nChecks original path, then with common extensions, and decompresses .gz files.</p>\n\n<p>Args:\n    user_provided_path (str): The initial path provided by the user or as a default.</p>\n\n<p>Returns:\n    Optional[str]: The absolute path to a usable (uncompressed) wordlist file, or None.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">user_provided_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.cracking_manager.CrackingManager.crack_wpa_handshake", "modulename": "src.core.cracking_manager", "qualname": "CrackingManager.crack_wpa_handshake", "kind": "function", "doc": "<p>Attempts to crack a WPA/WPA2 handshake using aircrack-ng.</p>\n\n<p>Args:\n    handshake_file_path (str): Full path to the .cap handshake file.\n    wordlist_path (str): The initial path to the wordlist file (will be resolved).</p>\n\n<p>Returns:\n    Optional[str]: The cracked password if found, None otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">handshake_file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">wordlist_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.credential_verifier", "modulename": "src.core.credential_verifier", "kind": "module", "doc": "<p>Credential Verifier: Provides functions to verify captured Wi-Fi passwords\nby attempting to connect to the target AP.</p>\n"}, {"fullname": "src.core.credential_verifier.CredentialVerifier", "modulename": "src.core.credential_verifier", "qualname": "CredentialVerifier", "kind": "class", "doc": "<p>Manages the verification of Wi-Fi credentials by attempting to connect\nto an access point using nmcli.</p>\n"}, {"fullname": "src.core.credential_verifier.CredentialVerifier.logger", "modulename": "src.core.credential_verifier", "qualname": "CredentialVerifier.logger", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.credential_verifier.CredentialVerifier.verify_password", "modulename": "src.core.credential_verifier", "qualname": "CredentialVerifier.verify_password", "kind": "function", "doc": "<p>Attempts to connect to a Wi-Fi network using the provided credentials via nmcli.</p>\n\n<p>Args:\n    verify_interface (str): The network interface to use for verification.\n                            This interface should NOT be the Evil Twin AP interface\n                            and must be in managed mode.\n    ssid (str): The SSID (network name) of the target Wi-Fi.\n    password (str): The password to attempt.\n    bssid (Optional[str]): The BSSID of the target AP (useful if multiple APs have same SSID).\n    timeout_seconds (int): Maximum time to wait for the connection attempt.</p>\n\n<p>Returns:\n    bool: True if connection is successful (password is valid), False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">verify_interface</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">ssid</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">password</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">bssid</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">timeout_seconds</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.debug_tools", "modulename": "src.core.debug_tools", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.core.debug_tools.console", "modulename": "src.core.debug_tools", "qualname": "console", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;console width=129 None&gt;"}, {"fullname": "src.core.debug_tools.debug_var", "modulename": "src.core.debug_tools", "qualname": "debug_var", "kind": "function", "doc": "<p>Prints a debug message with variable name and value.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">var_value</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"n\">var_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Variable&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.core.debug_tools.print_exception", "modulename": "src.core.debug_tools", "qualname": "print_exception", "kind": "function", "doc": "<p>Prints a formatted exception traceback with an optional message.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">e</span><span class=\"p\">:</span> <span class=\"ne\">Exception</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.core.debug_tools.dump_context", "modulename": "src.core.debug_tools", "qualname": "dump_context", "kind": "function", "doc": "<p>Dumps the contents of the CapGateContext's runtime_meta\nand its associated global AppState for debugging purposes.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ctx</span><span class=\"p\">:</span> <span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">state_management</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">CapGateContext</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;AppContext Dump&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.core.debug_tools.dump_app_state", "modulename": "src.core.debug_tools", "qualname": "dump_app_state", "kind": "function", "doc": "<p>Dumps the contents of the AppState object directly.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">app_state</span><span class=\"p\">:</span> <span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">state_management</span><span class=\"o\">.</span><span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">AppState</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;AppState Dump&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.core.dhcp_dns_manager", "modulename": "src.core.dhcp_dns_manager", "kind": "module", "doc": "<p>DHCP/DNS Manager: Provides high-level functions to set up and manage DHCP and DNS services,\nprimarily using dnsmasq.</p>\n"}, {"fullname": "src.core.dhcp_dns_manager.DhcpDnsManager", "modulename": "src.core.dhcp_dns_manager", "qualname": "DhcpDnsManager", "kind": "class", "doc": "<p>Manages DHCP and DNS services using dnsmasq for rogue APs.</p>\n"}, {"fullname": "src.core.dhcp_dns_manager.DhcpDnsManager.logger", "modulename": "src.core.dhcp_dns_manager", "qualname": "DhcpDnsManager.logger", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.dhcp_dns_manager.DhcpDnsManager.config_dir", "modulename": "src.core.dhcp_dns_manager", "qualname": "DhcpDnsManager.config_dir", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.dhcp_dns_manager.DhcpDnsManager.start_dhcp_dns", "modulename": "src.core.dhcp_dns_manager", "qualname": "DhcpDnsManager.start_dhcp_dns", "kind": "function", "doc": "<p>Starts DHCP and DNS services on the given interface using dnsmasq.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">interface</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">dhcp_start_ip</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">dhcp_end_ip</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">dhcp_lease_time</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">gateway_ip</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">dns_server_ip</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">dns_entries</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.dhcp_dns_manager.DhcpDnsManager.stop_dhcp_dns", "modulename": "src.core.dhcp_dns_manager", "qualname": "DhcpDnsManager.stop_dhcp_dns", "kind": "function", "doc": "<p>Stops the running dnsmasq process and cleans up config files.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.exceptions", "modulename": "src.core.exceptions", "kind": "module", "doc": "<p>exceptions.py \u2014 Custom exception hierarchy for CapGate.\nDefines structured, meaningful errors used across the core system and plugins.</p>\n"}, {"fullname": "src.core.exceptions.CapGateError", "modulename": "src.core.exceptions", "qualname": "CapGateError", "kind": "class", "doc": "<p>Base exception for all CapGate-related errors.</p>\n", "bases": "builtins.Exception"}, {"fullname": "src.core.exceptions.PluginLoadError", "modulename": "src.core.exceptions", "qualname": "PluginLoadError", "kind": "class", "doc": "<p>Raised when a plugin fails to load properly.</p>\n", "bases": "CapGateError"}, {"fullname": "src.core.exceptions.PluginLoadError.__init__", "modulename": "src.core.exceptions", "qualname": "PluginLoadError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">plugin_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "src.core.exceptions.PluginLoadError.plugin_name", "modulename": "src.core.exceptions", "qualname": "PluginLoadError.plugin_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.exceptions.PluginExecutionError", "modulename": "src.core.exceptions", "qualname": "PluginExecutionError", "kind": "class", "doc": "<p>Raised when a plugin throws an error during execution.</p>\n", "bases": "CapGateError"}, {"fullname": "src.core.exceptions.PluginExecutionError.__init__", "modulename": "src.core.exceptions", "qualname": "PluginExecutionError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">plugin_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "src.core.exceptions.PluginExecutionError.plugin_name", "modulename": "src.core.exceptions", "qualname": "PluginExecutionError.plugin_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.exceptions.InterfaceDetectionError", "modulename": "src.core.exceptions", "qualname": "InterfaceDetectionError", "kind": "class", "doc": "<p>Raised when there is a failure in detecting or parsing interfaces.</p>\n", "bases": "CapGateError"}, {"fullname": "src.core.exceptions.InterfaceDetectionError.__init__", "modulename": "src.core.exceptions", "qualname": "InterfaceDetectionError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "src.core.graphs", "modulename": "src.core.graphs", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.core.graphs.topology", "modulename": "src.core.graphs.topology", "kind": "module", "doc": "<p>Builds and manages CapGate\u2019s internal network topology graphs.\nSupports JSON import/export, in-memory graphing from AppState,\nand ASCII or PNG output for terminal or GUI clients.</p>\n"}, {"fullname": "src.core.graphs.topology.TopologyGraph", "modulename": "src.core.graphs.topology", "qualname": "TopologyGraph", "kind": "class", "doc": "<p>Class for managing CapGate network topologies.</p>\n"}, {"fullname": "src.core.graphs.topology.TopologyGraph.__init__", "modulename": "src.core.graphs.topology", "qualname": "TopologyGraph.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">json_file</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "src.core.graphs.topology.TopologyGraph.console", "modulename": "src.core.graphs.topology", "qualname": "TopologyGraph.console", "kind": "variable", "doc": "<p></p>\n", "annotation": ": rich.console.Console"}, {"fullname": "src.core.graphs.topology.TopologyGraph.graph", "modulename": "src.core.graphs.topology", "qualname": "TopologyGraph.graph", "kind": "variable", "doc": "<p></p>\n", "annotation": ": networkx.classes.graph.Graph"}, {"fullname": "src.core.graphs.topology.TopologyGraph.nodes", "modulename": "src.core.graphs.topology", "qualname": "TopologyGraph.nodes", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[Dict[str, Any]]"}, {"fullname": "src.core.graphs.topology.TopologyGraph.edges", "modulename": "src.core.graphs.topology", "qualname": "TopologyGraph.edges", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[Dict[str, str]]"}, {"fullname": "src.core.graphs.topology.TopologyGraph.print_ascii", "modulename": "src.core.graphs.topology", "qualname": "TopologyGraph.print_ascii", "kind": "function", "doc": "<p>Print a basic tree representation of the topology.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.graphs.topology.TopologyGraph.export_png", "modulename": "src.core.graphs.topology", "qualname": "TopologyGraph.export_png", "kind": "function", "doc": "<p>Export the current graph to a PNG file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">out_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;exports/topology.png&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.graphs.topology.TopologyGraph.build_from_context", "modulename": "src.core.graphs.topology", "qualname": "TopologyGraph.build_from_context", "kind": "function", "doc": "<p>Build a TopologyGraph from live AppState memory (accessed via CapGateContext).\nPulls interface and device data from shared AppState.discovery_graph.\nReturns:\n    TopologyGraph: An instance of the graph built from context.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">) -> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">graphs</span><span class=\"o\">.</span><span class=\"n\">topology</span><span class=\"o\">.</span><span class=\"n\">TopologyGraph</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.interface_controller", "modulename": "src.core.interface_controller", "kind": "module", "doc": "<p>Interface Controller: Provides low-level control over network interfaces,\nincluding setting monitor mode, restoring original states, and managing\nNetworkManager integration.</p>\n"}, {"fullname": "src.core.interface_controller.InterfaceController", "modulename": "src.core.interface_controller", "qualname": "InterfaceController", "kind": "class", "doc": "<p>Manages direct control of network interfaces and their modes.</p>\n"}, {"fullname": "src.core.interface_controller.InterfaceController.__init__", "modulename": "src.core.interface_controller", "qualname": "InterfaceController.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">app_state</span><span class=\"p\">:</span> <span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">state_management</span><span class=\"o\">.</span><span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">AppState</span></span>)</span>"}, {"fullname": "src.core.interface_controller.InterfaceController.app_state", "modulename": "src.core.interface_controller", "qualname": "InterfaceController.app_state", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.interface_controller.InterfaceController.logger", "modulename": "src.core.interface_controller", "qualname": "InterfaceController.logger", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.interface_controller.InterfaceController.enable_monitor_mode", "modulename": "src.core.interface_controller", "qualname": "InterfaceController.enable_monitor_mode", "kind": "function", "doc": "<p>Sets a given wireless interface to monitor mode.\nHandles NetworkManager integration.</p>\n\n<p>Args:\n    interface (str): The name of the wireless interface (e.g., 'wlan0').</p>\n\n<p>Returns:\n    Tuple[Optional[str], bool]: A tuple containing:\n        - The name of the interface in monitor mode (can be original or new 'mon' interface).\n        - True if NetworkManager was managing the interface and was set to unmanaged by this function, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">interface</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.interface_controller.InterfaceController.restore_interface_state", "modulename": "src.core.interface_controller", "qualname": "InterfaceController.restore_interface_state", "kind": "function", "doc": "<p>Restores a wireless interface from monitor mode to its original state.\nIf NetworkManager was managing it, it attempts to return control.</p>\n\n<p>Args:\n    original_iface_name (str): The original interface name (e.g., 'wlan0').\n    nm_was_managed (bool): True if NetworkManager was managing it before monitor mode.\n    current_monitor_iface_name (str): The interface name currently in monitor mode (e.g., 'wlan0mon' or 'wlan0').</p>\n\n<p>Returns:\n    bool: True if restoration was successful, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">original_iface_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">nm_was_managed</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">current_monitor_iface_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.interface_manager", "modulename": "src.core.interface_manager", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.core.interface_manager.InterfaceManager", "modulename": "src.core.interface_manager", "qualname": "InterfaceManager", "kind": "class", "doc": "<p>Manages access to and triggers detection of detailed information\nabout system network interfaces, leveraging the AppState.</p>\n"}, {"fullname": "src.core.interface_manager.InterfaceManager.app_state", "modulename": "src.core.interface_manager", "qualname": "InterfaceManager.app_state", "kind": "variable", "doc": "<p></p>\n", "annotation": ": core.state_management.state.AppState"}, {"fullname": "src.core.interface_manager.InterfaceManager.get_interfaces", "modulename": "src.core.interface_manager", "qualname": "InterfaceManager.get_interfaces", "kind": "function", "doc": "<p>Filter and return network interfaces from AppState.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">wireless_only</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">monitor_capable_only</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">is_up_only</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">schemas</span><span class=\"o\">.</span><span class=\"n\">interface</span><span class=\"o\">.</span><span class=\"n\">Interface</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.interface_manager.InterfaceManager.get_interface_by_name", "modulename": "src.core.interface_manager", "qualname": "InterfaceManager.get_interface_by_name", "kind": "function", "doc": "<p>Retrieve a single interface by its name from AppState.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">schemas</span><span class=\"o\">.</span><span class=\"n\">interface</span><span class=\"o\">.</span><span class=\"n\">Interface</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.interface_manager.InterfaceManager.refresh_interfaces", "modulename": "src.core.interface_manager", "qualname": "InterfaceManager.refresh_interfaces", "kind": "function", "doc": "<p>Triggers a re-scan of interfaces by the iface_scanner and updates the AppState.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.core.logger", "modulename": "src.core.logger", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.core.logger.LoggerManager", "modulename": "src.core.logger", "qualname": "LoggerManager", "kind": "class", "doc": "<p>Centralized logger that:</p>\n\n<ul>\n<li>Logs to console with color (via Rich)</li>\n<li>Logs to file with rotation</li>\n<li>Supports different verbosity levels</li>\n<li>Tagging by plugin/component</li>\n</ul>\n"}, {"fullname": "src.core.logger.LoggerManager.__init__", "modulename": "src.core.logger", "qualname": "LoggerManager.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;capgate&#39;</span>, </span><span class=\"param\"><span class=\"n\">log_dir</span><span class=\"o\">=</span><span class=\"s1\">&#39;logs&#39;</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"s1\">&#39;VERBOSE&#39;</span>, </span><span class=\"param\"><span class=\"n\">silent</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "src.core.logger.LoggerManager.name", "modulename": "src.core.logger", "qualname": "LoggerManager.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.logger.LoggerManager.silent", "modulename": "src.core.logger", "qualname": "LoggerManager.silent", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.logger.LoggerManager.log_dir", "modulename": "src.core.logger", "qualname": "LoggerManager.log_dir", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.logger.LoggerManager.log_file", "modulename": "src.core.logger", "qualname": "LoggerManager.log_file", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.logger.LoggerManager.level", "modulename": "src.core.logger", "qualname": "LoggerManager.level", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.logger.LoggerManager.console", "modulename": "src.core.logger", "qualname": "LoggerManager.console", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.logger.LoggerManager.logger", "modulename": "src.core.logger", "qualname": "LoggerManager.logger", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.logger.LoggerManager.get_logger", "modulename": "src.core.logger", "qualname": "LoggerManager.get_logger", "kind": "function", "doc": "<p>Return a logger with optional submodule tagging (e.g. 'core.plugin_loader')</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">submodule</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.core.logger.logger_manager", "modulename": "src.core.logger", "qualname": "logger_manager", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;src.core.logger.LoggerManager object&gt;"}, {"fullname": "src.core.logger.logger", "modulename": "src.core.logger", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger capgate (DEBUG)&gt;"}, {"fullname": "src.core.logger.get_logger", "modulename": "src.core.logger", "qualname": "get_logger", "kind": "function", "doc": "<p>Get a logger instance, optionally with submodule tagging.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">submodule</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.core.logger.log", "modulename": "src.core.logger", "qualname": "log", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger capgate (DEBUG)&gt;"}, {"fullname": "src.core.network_scanner", "modulename": "src.core.network_scanner", "kind": "module", "doc": "<p>Provides core network scanning functionalities, such as running airodump-ng\nand parsing its output. Designed to be reusable across plugins.</p>\n"}, {"fullname": "src.core.network_scanner.NetworkScanner", "modulename": "src.core.network_scanner", "qualname": "NetworkScanner", "kind": "class", "doc": "<p>Encapsulates network scanning operations, primarily using airodump-ng.</p>\n"}, {"fullname": "src.core.network_scanner.NetworkScanner.logger", "modulename": "src.core.network_scanner", "qualname": "NetworkScanner.logger", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.network_scanner.NetworkScanner.perform_airodump_scan", "modulename": "src.core.network_scanner", "qualname": "NetworkScanner.perform_airodump_scan", "kind": "function", "doc": "<p>Executes airodump-ng to scan for Wi-Fi networks and parses its output.</p>\n\n<p>Args:\n    monitor_interface (str): The interface (must be in monitor mode) to use for scanning.\n    scan_duration_seconds (int): How long (in seconds) to run the scan.\n    network_security_filter (str): A string to filter networks by privacy type (e.g., \"WPA\", \"WEP\", \"OPN\").</p>\n\n<p>Returns:\n    List[Dict[str, str]]: A list of dictionaries, each representing a discovered AP\n                           matching the filter. Returns an empty list on failure or no matches.\n                           Each dict contains keys: \"bssid\", \"channel\", \"essid\", \"essid_raw\", \"privacy\", \"power\".</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">monitor_interface</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">scan_duration_seconds</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">network_security_filter</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;WPA&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.plugin_creator", "modulename": "src.core.plugin_creator", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.core.plugin_creator.prompt_for_field", "modulename": "src.core.plugin_creator", "qualname": "prompt_for_field", "kind": "function", "doc": "<p>Prompt user for a field with a default fallback.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">prompt_text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.plugin_creator.create_plugin", "modulename": "src.core.plugin_creator", "qualname": "create_plugin", "kind": "function", "doc": "<p>Create a new plugin directory based on the template.</p>\n\n<p>Args:\n    plugin_name (str): Name of the plugin to create.\n    author (str): Default author name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">plugin_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">author</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Anonymous&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.plugin_creator.main", "modulename": "src.core.plugin_creator", "qualname": "main", "kind": "function", "doc": "<p>CLI entry point for creating a new plugin.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.plugin_loader", "modulename": "src.core.plugin_loader", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.core.plugin_loader.my_logger", "modulename": "src.core.plugin_loader", "qualname": "my_logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger capgate.my_submodule (DEBUG)&gt;"}, {"fullname": "src.core.plugin_loader.Plugin", "modulename": "src.core.plugin_loader", "qualname": "Plugin", "kind": "class", "doc": "<p>Represents a loaded plugin with its metadata and logic.</p>\n"}, {"fullname": "src.core.plugin_loader.Plugin.__init__", "modulename": "src.core.plugin_loader", "qualname": "Plugin.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">module</span><span class=\"p\">:</span> <span class=\"n\">module</span>, </span><span class=\"param\"><span class=\"n\">metadata</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "src.core.plugin_loader.Plugin.name", "modulename": "src.core.plugin_loader", "qualname": "Plugin.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.plugin_loader.Plugin.module", "modulename": "src.core.plugin_loader", "qualname": "Plugin.module", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.plugin_loader.Plugin.metadata", "modulename": "src.core.plugin_loader", "qualname": "Plugin.metadata", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.plugin_loader.Plugin.run", "modulename": "src.core.plugin_loader", "qualname": "Plugin.run", "kind": "function", "doc": "<p>Delegates execution to the plugin's main.run()</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.core.plugin_loader.PluginLoader", "modulename": "src.core.plugin_loader", "qualname": "PluginLoader", "kind": "class", "doc": "<p>Dynamically loads plugins from the plugins directory.\nEach plugin must have:\n    - A metadata.json file with required fields\n    - A main.py file with a <code>run()</code> function</p>\n"}, {"fullname": "src.core.plugin_loader.PluginLoader.__init__", "modulename": "src.core.plugin_loader", "qualname": "PluginLoader.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">plugin_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;src/plugins&#39;</span></span>)</span>"}, {"fullname": "src.core.plugin_loader.PluginLoader.plugin_dir", "modulename": "src.core.plugin_loader", "qualname": "PluginLoader.plugin_dir", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.plugin_loader.PluginLoader.plugins", "modulename": "src.core.plugin_loader", "qualname": "PluginLoader.plugins", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, src.core.plugin_loader.Plugin]"}, {"fullname": "src.core.plugin_loader.PluginLoader.get_plugin", "modulename": "src.core.plugin_loader", "qualname": "PluginLoader.get_plugin", "kind": "function", "doc": "<p>Retrieve a plugin by its folder name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">plugin_loader</span><span class=\"o\">.</span><span class=\"n\">Plugin</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.plugin_loader.PluginLoader.list_plugins", "modulename": "src.core.plugin_loader", "qualname": "PluginLoader.list_plugins", "kind": "function", "doc": "<p>Return a list of available plugin names.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.plugin_loader.PluginLoader.run_plugin", "modulename": "src.core.plugin_loader", "qualname": "PluginLoader.run_plugin", "kind": "function", "doc": "<p>Run a specific plugin by name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.state_management", "modulename": "src.core.state_management", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.core.state_management.context", "modulename": "src.core.state_management.context", "kind": "module", "doc": "<p>context.py \u2014 Runtime Operational Context\nEncapsulates short-lived metadata and execution state per CLI run or plugin task.</p>\n"}, {"fullname": "src.core.state_management.context.CapGateContext", "modulename": "src.core.state_management.context", "qualname": "CapGateContext", "kind": "class", "doc": "<p>Task-scoped operational context for runtime execution.</p>\n\n<p>Attributes:\n    runtime_meta (Dict[str, Any]): Per-run metadata (e.g., current plugin, interface, flags).\n    state (GlobalAppState): Reference to shared <em>global</em> application state.</p>\n"}, {"fullname": "src.core.state_management.context.CapGateContext.runtime_meta", "modulename": "src.core.state_management.context", "qualname": "CapGateContext.runtime_meta", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "src.core.state_management.context.CapGateContext.state", "modulename": "src.core.state_management.context", "qualname": "CapGateContext.state", "kind": "variable", "doc": "<p></p>\n", "annotation": ": src.core.state_management.state.AppState"}, {"fullname": "src.core.state_management.context.CapGateContext.set", "modulename": "src.core.state_management.context", "qualname": "CapGateContext.set", "kind": "function", "doc": "<p>Thread-safe context setter (for runtime_meta).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.state_management.context.CapGateContext.get", "modulename": "src.core.state_management.context", "qualname": "CapGateContext.get", "kind": "function", "doc": "<p>Thread-safe context getter (for runtime_meta).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"n\">Any</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.state_management.context.CapGateContext.to_dict", "modulename": "src.core.state_management.context", "qualname": "CapGateContext.to_dict", "kind": "function", "doc": "<p>Export runtime context's metadata as a dictionary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.state_management.context.get_context", "modulename": "src.core.state_management.context", "qualname": "get_context", "kind": "function", "doc": "<p>Returns the singleton CapGateContext instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">state_management</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">CapGateContext</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.state_management.state", "modulename": "src.core.state_management.state", "kind": "module", "doc": "<p>state.py \u2014 Central Application State\nManages persistent, shared data across CapGate tools and plugins.</p>\n"}, {"fullname": "src.core.state_management.state.AppState", "modulename": "src.core.state_management.state", "qualname": "AppState", "kind": "class", "doc": "<p>Central application state store.\nAll access to its attributes should ideally be via helper methods for thread-safety.</p>\n\n<p>Attributes:\n    loaded_plugins (List[str]): Plugins registered by the system.\n    discovery_graph (Dict[str, Any]): Live or cached network map ({'interfaces': {}, 'devices': {}}).\n    user_config (Dict): User-defined configuration settings.</p>\n"}, {"fullname": "src.core.state_management.state.AppState.loaded_plugins", "modulename": "src.core.state_management.state", "qualname": "AppState.loaded_plugins", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.core.state_management.state.AppState.discovery_graph", "modulename": "src.core.state_management.state", "qualname": "AppState.discovery_graph", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "src.core.state_management.state.AppState.user_config", "modulename": "src.core.state_management.state", "qualname": "AppState.user_config", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "src.core.state_management.state.AppState.get_loaded_plugins", "modulename": "src.core.state_management.state", "qualname": "AppState.get_loaded_plugins", "kind": "function", "doc": "<p>Returns a copy of the list of loaded plugins.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.state_management.state.AppState.set_loaded_plugins", "modulename": "src.core.state_management.state", "qualname": "AppState.set_loaded_plugins", "kind": "function", "doc": "<p>Sets the list of loaded plugins.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">plugins</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.state_management.state.AppState.get_discovery_graph", "modulename": "src.core.state_management.state", "qualname": "AppState.get_discovery_graph", "kind": "function", "doc": "<p>Returns the discovery_graph, ensuring it's initialized.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.state_management.state.AppState.update_interfaces", "modulename": "src.core.state_management.state", "qualname": "AppState.update_interfaces", "kind": "function", "doc": "<p>Updates the interfaces within the discovery_graph.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">interfaces_data</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.state_management.state.AppState.update_devices", "modulename": "src.core.state_management.state", "qualname": "AppState.update_devices", "kind": "function", "doc": "<p>Updates the devices within the discovery_graph.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">devices_data</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.state_management.state.AppState.get_user_config", "modulename": "src.core.state_management.state", "qualname": "AppState.get_user_config", "kind": "function", "doc": "<p>Returns a copy of the user configuration.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.state_management.state.AppState.set_user_config", "modulename": "src.core.state_management.state", "qualname": "AppState.set_user_config", "kind": "function", "doc": "<p>Sets the user configuration.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.state_management.state.AppState.to_dict", "modulename": "src.core.state_management.state", "qualname": "AppState.to_dict", "kind": "function", "doc": "<p>Return the full state as a dictionary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.state_management.state.AppState.save_to_file", "modulename": "src.core.state_management.state", "qualname": "AppState.save_to_file", "kind": "function", "doc": "<p>Persist the current state to a JSON file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.core.state_management.state.AppState.load_from_file", "modulename": "src.core.state_management.state", "qualname": "AppState.load_from_file", "kind": "function", "doc": "<p>Load saved state from a JSON file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.core.state_management.state.get_state", "modulename": "src.core.state_management.state", "qualname": "get_state", "kind": "function", "doc": "<p>Returns the singleton AppState instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">state_management</span><span class=\"o\">.</span><span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">AppState</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.traffic_redirector", "modulename": "src.core.traffic_redirector", "kind": "module", "doc": "<p>Traffic Redirector: Manages iptables rules for redirecting network traffic,\ncrucial for intercepting client requests in an Evil Twin attack.</p>\n"}, {"fullname": "src.core.traffic_redirector.TrafficRedirector", "modulename": "src.core.traffic_redirector", "qualname": "TrafficRedirector", "kind": "class", "doc": "<p>Manages iptables rules for redirecting traffic, enabling IP forwarding,\nand handling NAT/masquerading for an Evil Twin setup.</p>\n"}, {"fullname": "src.core.traffic_redirector.TrafficRedirector.logger", "modulename": "src.core.traffic_redirector", "qualname": "TrafficRedirector.logger", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.traffic_redirector.TrafficRedirector.enable_ip_forwarding", "modulename": "src.core.traffic_redirector", "qualname": "TrafficRedirector.enable_ip_forwarding", "kind": "function", "doc": "<p>Enables IP forwarding in the kernel (net.ipv4.ip_forward).\nCrucial for routing traffic through the AP.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.traffic_redirector.TrafficRedirector.setup_redirection_rules", "modulename": "src.core.traffic_redirector", "qualname": "TrafficRedirector.setup_redirection_rules", "kind": "function", "doc": "<p>Sets up iptables rules to redirect HTTP/HTTPS traffic to the local web server\nand enable NAT for internet access (if needed).</p>\n\n<p>Args:\n    ap_interface (str): The interface of the rogue AP.\n    internet_interface (str): The interface providing internet access.\n    webserver_ip (str): The IP address of the host machine on the AP interface.\n    webserver_port (int): The port of the rogue web server.</p>\n\n<p>Returns:\n    bool: True if rules are successfully applied, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ap_interface</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">internet_interface</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">webserver_ip</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">webserver_port</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">80</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.traffic_redirector.TrafficRedirector.clear_redirection_rules", "modulename": "src.core.traffic_redirector", "qualname": "TrafficRedirector.clear_redirection_rules", "kind": "function", "doc": "<p>Clears all iptables rules applied by this instance (in _applied_rules)\nand flushes all chains and deletes custom chains for filter, nat, mangle, raw tables.\nAlso disables IP forwarding if this instance enabled it.\nThis is a destructive operation and should be used with caution.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.web_server_manager", "modulename": "src.core.web_server_manager", "kind": "module", "doc": "<p>Web Server Manager: Hosts fake login pages for Evil Twin attacks and captures credentials.\nUtilizes the Flask micro-framework.</p>\n"}, {"fullname": "src.core.web_server_manager.generate_204", "modulename": "src.core.web_server_manager", "qualname": "generate_204", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">flask</span><span class=\"o\">.</span><span class=\"n\">wrappers</span><span class=\"o\">.</span><span class=\"n\">Response</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.web_server_manager.hotspot_detect", "modulename": "src.core.web_server_manager", "qualname": "hotspot_detect", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">flask</span><span class=\"o\">.</span><span class=\"n\">wrappers</span><span class=\"o\">.</span><span class=\"n\">Response</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.web_server_manager.ncsi_txt", "modulename": "src.core.web_server_manager", "qualname": "ncsi_txt", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">flask</span><span class=\"o\">.</span><span class=\"n\">wrappers</span><span class=\"o\">.</span><span class=\"n\">Response</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.web_server_manager.connect_test_txt", "modulename": "src.core.web_server_manager", "qualname": "connect_test_txt", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">flask</span><span class=\"o\">.</span><span class=\"n\">wrappers</span><span class=\"o\">.</span><span class=\"n\">Response</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.web_server_manager.generic_redirect", "modulename": "src.core.web_server_manager", "qualname": "generic_redirect", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">flask</span><span class=\"o\">.</span><span class=\"n\">wrappers</span><span class=\"o\">.</span><span class=\"n\">Response</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.web_server_manager.index", "modulename": "src.core.web_server_manager", "qualname": "index", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">flask</span><span class=\"o\">.</span><span class=\"n\">wrappers</span><span class=\"o\">.</span><span class=\"n\">Response</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.web_server_manager.login_handler", "modulename": "src.core.web_server_manager", "qualname": "login_handler", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">flask</span><span class=\"o\">.</span><span class=\"n\">wrappers</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.web_server_manager.serve_static", "modulename": "src.core.web_server_manager", "qualname": "serve_static", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">flask</span><span class=\"o\">.</span><span class=\"n\">wrappers</span><span class=\"o\">.</span><span class=\"n\">Response</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.web_server_manager.WebServerManager", "modulename": "src.core.web_server_manager", "qualname": "WebServerManager", "kind": "class", "doc": "<p>Manages the lifecycle of the Flask web server for Evil Twin attacks.</p>\n"}, {"fullname": "src.core.web_server_manager.WebServerManager.logger", "modulename": "src.core.web_server_manager", "qualname": "WebServerManager.logger", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.web_server_manager.WebServerManager.start_webserver", "modulename": "src.core.web_server_manager", "qualname": "WebServerManager.start_webserver", "kind": "function", "doc": "<p>Starts the web server to host fake login pages.</p>\n\n<p>Args:\n    listen_ip (str): The IP address the web server should bind to.\n    listen_port (int): The port the web server should listen on.\n    credentials_capture_callback (Optional[Callable]): Callback for captured credentials.</p>\n\n<p>Returns:\n    bool: True if the web server started successfully, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">listen_ip</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">listen_port</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">80</span>,</span><span class=\"param\">\t<span class=\"n\">credentials_capture_callback</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]],</span> <span class=\"n\">NoneType</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.web_server_manager.WebServerManager.stop_webserver", "modulename": "src.core.web_server_manager", "qualname": "WebServerManager.stop_webserver", "kind": "function", "doc": "<p>Stops the running web server and cleans up temporary files.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.web_server_manager.shutdown_flask_server", "modulename": "src.core.web_server_manager", "qualname": "shutdown_flask_server", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.db", "modulename": "src.db", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.db.schemas", "modulename": "src.db.schemas", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.db.schemas.device", "modulename": "src.db.schemas.device", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.db.schemas.device.Device", "modulename": "src.db.schemas.device", "qualname": "Device", "kind": "class", "doc": "<p>!!! abstract \"Usage Documentation\"\n    <a href=\"../concepts/models.md\">Models</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of the class variables defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "src.db.schemas.device.Device.mac", "modulename": "src.db.schemas.device", "qualname": "Device.mac", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.db.schemas.device.Device.ip", "modulename": "src.db.schemas.device", "qualname": "Device.ip", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.db.schemas.device.Device.hostname", "modulename": "src.db.schemas.device", "qualname": "Device.hostname", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.db.schemas.device.Device.name", "modulename": "src.db.schemas.device", "qualname": "Device.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.db.schemas.device.Device.label", "modulename": "src.db.schemas.device", "qualname": "Device.label", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.db.schemas.device.Device.type", "modulename": "src.db.schemas.device", "qualname": "Device.type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.db.schemas.device.Device.model", "modulename": "src.db.schemas.device", "qualname": "Device.model", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.db.schemas.device.Device.os", "modulename": "src.db.schemas.device", "qualname": "Device.os", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.db.schemas.device.Device.os_version", "modulename": "src.db.schemas.device", "qualname": "Device.os_version", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.db.schemas.device.Device.firmware_version", "modulename": "src.db.schemas.device", "qualname": "Device.firmware_version", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.db.schemas.device.Device.hardware_version", "modulename": "src.db.schemas.device", "qualname": "Device.hardware_version", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.db.schemas.device.Device.serial_number", "modulename": "src.db.schemas.device", "qualname": "Device.serial_number", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.db.schemas.device.Device.model_number", "modulename": "src.db.schemas.device", "qualname": "Device.model_number", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.db.schemas.device.Device.product_name", "modulename": "src.db.schemas.device", "qualname": "Device.product_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.db.schemas.device.Device.product_id", "modulename": "src.db.schemas.device", "qualname": "Device.product_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.db.schemas.device.Device.product_url", "modulename": "src.db.schemas.device", "qualname": "Device.product_url", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.db.schemas.device.Device.product_description", "modulename": "src.db.schemas.device", "qualname": "Device.product_description", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.db.schemas.device.Device.product_image", "modulename": "src.db.schemas.device", "qualname": "Device.product_image", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.db.schemas.device.Device.product_category", "modulename": "src.db.schemas.device", "qualname": "Device.product_category", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.db.schemas.device.Device.product_subcategory", "modulename": "src.db.schemas.device", "qualname": "Device.product_subcategory", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.db.schemas.device.Device.product_tags", "modulename": "src.db.schemas.device", "qualname": "Device.product_tags", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[list[str]]"}, {"fullname": "src.db.schemas.device.Device.product_features", "modulename": "src.db.schemas.device", "qualname": "Device.product_features", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[list[str]]"}, {"fullname": "src.db.schemas.device.Device.product_specs", "modulename": "src.db.schemas.device", "qualname": "Device.product_specs", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[dict[str, Any]]"}, {"fullname": "src.db.schemas.device.Device.product_manual", "modulename": "src.db.schemas.device", "qualname": "Device.product_manual", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.db.schemas.device.Device.product_support_url", "modulename": "src.db.schemas.device", "qualname": "Device.product_support_url", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.db.schemas.device.Device.product_support_email", "modulename": "src.db.schemas.device", "qualname": "Device.product_support_email", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.db.schemas.device.Device.product_support_phone", "modulename": "src.db.schemas.device", "qualname": "Device.product_support_phone", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.db.schemas.device.Device.product_support_hours", "modulename": "src.db.schemas.device", "qualname": "Device.product_support_hours", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.db.schemas.device.Device.product_release_date", "modulename": "src.db.schemas.device", "qualname": "Device.product_release_date", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.db.schemas.device.Device.product_discontinued", "modulename": "src.db.schemas.device", "qualname": "Device.product_discontinued", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "src.db.schemas.device.Device.product_warranty", "modulename": "src.db.schemas.device", "qualname": "Device.product_warranty", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.db.schemas.device.Device.product_certifications", "modulename": "src.db.schemas.device", "qualname": "Device.product_certifications", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[list[str]]"}, {"fullname": "src.db.schemas.device.Device.product_compliance", "modulename": "src.db.schemas.device", "qualname": "Device.product_compliance", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[list[str]]"}, {"fullname": "src.db.schemas.device.Device.product_compatibility", "modulename": "src.db.schemas.device", "qualname": "Device.product_compatibility", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[list[str]]"}, {"fullname": "src.db.schemas.device.Device.product_accessories", "modulename": "src.db.schemas.device", "qualname": "Device.product_accessories", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[list[str]]"}, {"fullname": "src.db.schemas.device.Device.product_related", "modulename": "src.db.schemas.device", "qualname": "Device.product_related", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[list[str]]"}, {"fullname": "src.db.schemas.device.Device.product_resources", "modulename": "src.db.schemas.device", "qualname": "Device.product_resources", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[list[str]]"}, {"fullname": "src.db.schemas.device.Device.product_notes", "modulename": "src.db.schemas.device", "qualname": "Device.product_notes", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.db.schemas.device.Device.product_custom_fields", "modulename": "src.db.schemas.device", "qualname": "Device.product_custom_fields", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[dict[str, Any]]"}, {"fullname": "src.db.schemas.device.Device.product_custom_tags", "modulename": "src.db.schemas.device", "qualname": "Device.product_custom_tags", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[list[str]]"}, {"fullname": "src.db.schemas.device.Device.vendor", "modulename": "src.db.schemas.device", "qualname": "Device.vendor", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.db.schemas.device.Device.signal_strength", "modulename": "src.db.schemas.device", "qualname": "Device.signal_strength", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "src.db.schemas.device.Device.is_router", "modulename": "src.db.schemas.device", "qualname": "Device.is_router", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.last_seen", "modulename": "src.db.schemas.device", "qualname": "Device.last_seen", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]"}, {"fullname": "src.db.schemas.device.Device.is_active", "modulename": "src.db.schemas.device", "qualname": "Device.is_active", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_tracked", "modulename": "src.db.schemas.device", "qualname": "Device.is_tracked", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_ignored", "modulename": "src.db.schemas.device", "qualname": "Device.is_ignored", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_blocked", "modulename": "src.db.schemas.device", "qualname": "Device.is_blocked", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_whitelisted", "modulename": "src.db.schemas.device", "qualname": "Device.is_whitelisted", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_blacklisted", "modulename": "src.db.schemas.device", "qualname": "Device.is_blacklisted", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_suspicious", "modulename": "src.db.schemas.device", "qualname": "Device.is_suspicious", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_known", "modulename": "src.db.schemas.device", "qualname": "Device.is_known", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_new", "modulename": "src.db.schemas.device", "qualname": "Device.is_new", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_rogue", "modulename": "src.db.schemas.device", "qualname": "Device.is_rogue", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_hidden", "modulename": "src.db.schemas.device", "qualname": "Device.is_hidden", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_guest", "modulename": "src.db.schemas.device", "qualname": "Device.is_guest", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_persistent", "modulename": "src.db.schemas.device", "qualname": "Device.is_persistent", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_critical", "modulename": "src.db.schemas.device", "qualname": "Device.is_critical", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_vulnerable", "modulename": "src.db.schemas.device", "qualname": "Device.is_vulnerable", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_exploited", "modulename": "src.db.schemas.device", "qualname": "Device.is_exploited", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_compromised", "modulename": "src.db.schemas.device", "qualname": "Device.is_compromised", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_malicious", "modulename": "src.db.schemas.device", "qualname": "Device.is_malicious", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_anomalous", "modulename": "src.db.schemas.device", "qualname": "Device.is_anomalous", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_inactive", "modulename": "src.db.schemas.device", "qualname": "Device.is_inactive", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_offline", "modulename": "src.db.schemas.device", "qualname": "Device.is_offline", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_online", "modulename": "src.db.schemas.device", "qualname": "Device.is_online", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_connected", "modulename": "src.db.schemas.device", "qualname": "Device.is_connected", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_disconnected", "modulename": "src.db.schemas.device", "qualname": "Device.is_disconnected", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_authenticated", "modulename": "src.db.schemas.device", "qualname": "Device.is_authenticated", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_deauthenticated", "modulename": "src.db.schemas.device", "qualname": "Device.is_deauthenticated", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_roaming", "modulename": "src.db.schemas.device", "qualname": "Device.is_roaming", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_station", "modulename": "src.db.schemas.device", "qualname": "Device.is_station", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_ap", "modulename": "src.db.schemas.device", "qualname": "Device.is_ap", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_client", "modulename": "src.db.schemas.device", "qualname": "Device.is_client", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_server", "modulename": "src.db.schemas.device", "qualname": "Device.is_server", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_bridge", "modulename": "src.db.schemas.device", "qualname": "Device.is_bridge", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_repeater", "modulename": "src.db.schemas.device", "qualname": "Device.is_repeater", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_gateway", "modulename": "src.db.schemas.device", "qualname": "Device.is_gateway", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_switch", "modulename": "src.db.schemas.device", "qualname": "Device.is_switch", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_router_mode", "modulename": "src.db.schemas.device", "qualname": "Device.is_router_mode", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_access_point", "modulename": "src.db.schemas.device", "qualname": "Device.is_access_point", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_mesh_node", "modulename": "src.db.schemas.device", "qualname": "Device.is_mesh_node", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_iot_device", "modulename": "src.db.schemas.device", "qualname": "Device.is_iot_device", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_smart_device", "modulename": "src.db.schemas.device", "qualname": "Device.is_smart_device", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_printer", "modulename": "src.db.schemas.device", "qualname": "Device.is_printer", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_camera", "modulename": "src.db.schemas.device", "qualname": "Device.is_camera", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_speaker", "modulename": "src.db.schemas.device", "qualname": "Device.is_speaker", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_tv", "modulename": "src.db.schemas.device", "qualname": "Device.is_tv", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_laptop", "modulename": "src.db.schemas.device", "qualname": "Device.is_laptop", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_desktop", "modulename": "src.db.schemas.device", "qualname": "Device.is_desktop", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_mobile", "modulename": "src.db.schemas.device", "qualname": "Device.is_mobile", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_tablet", "modulename": "src.db.schemas.device", "qualname": "Device.is_tablet", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_wearable", "modulename": "src.db.schemas.device", "qualname": "Device.is_wearable", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_vehicle", "modulename": "src.db.schemas.device", "qualname": "Device.is_vehicle", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_unknown", "modulename": "src.db.schemas.device", "qualname": "Device.is_unknown", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.is_custom", "modulename": "src.db.schemas.device", "qualname": "Device.is_custom", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.device.Device.model_config", "modulename": "src.db.schemas.device", "qualname": "Device.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "default_value": "{&#x27;extra&#x27;: &#x27;allow&#x27;}"}, {"fullname": "src.db.schemas.device.Device.to_dict", "modulename": "src.db.schemas.device", "qualname": "Device.to_dict", "kind": "function", "doc": "<p>Converts the Device model instance to a dictionary, excluding unset/None values.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.db.schemas.interface", "modulename": "src.db.schemas.interface", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.db.schemas.interface.Interface", "modulename": "src.db.schemas.interface", "qualname": "Interface", "kind": "class", "doc": "<p>!!! abstract \"Usage Documentation\"\n    <a href=\"../concepts/models.md\">Models</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of the class variables defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "src.db.schemas.interface.Interface.name", "modulename": "src.db.schemas.interface", "qualname": "Interface.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.db.schemas.interface.Interface.mac", "modulename": "src.db.schemas.interface", "qualname": "Interface.mac", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.db.schemas.interface.Interface.is_up", "modulename": "src.db.schemas.interface", "qualname": "Interface.is_up", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.ip_address", "modulename": "src.db.schemas.interface", "qualname": "Interface.ip_address", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.db.schemas.interface.Interface.mode", "modulename": "src.db.schemas.interface", "qualname": "Interface.mode", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.db.schemas.interface.Interface.driver", "modulename": "src.db.schemas.interface", "qualname": "Interface.driver", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.db.schemas.interface.Interface.phy_name", "modulename": "src.db.schemas.interface", "qualname": "Interface.phy_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.db.schemas.interface.Interface.ssid", "modulename": "src.db.schemas.interface", "qualname": "Interface.ssid", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.db.schemas.interface.Interface.tx_power", "modulename": "src.db.schemas.interface", "qualname": "Interface.tx_power", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.db.schemas.interface.Interface.channel_frequency", "modulename": "src.db.schemas.interface", "qualname": "Interface.channel_frequency", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.db.schemas.interface.Interface.signal_quality", "modulename": "src.db.schemas.interface", "qualname": "Interface.signal_quality", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "src.db.schemas.interface.Interface.is_wireless", "modulename": "src.db.schemas.interface", "qualname": "Interface.is_wireless", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supported_modes_list", "modulename": "src.db.schemas.interface", "qualname": "Interface.supported_modes_list", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.db.schemas.interface.Interface.supports_monitor", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_monitor", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_managed", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_managed", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_ap", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_ap", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_mesh", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_mesh", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_p2p", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_p2p", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_adhoc", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_adhoc", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_wds", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_wds", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_vap", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_vap", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_tdma", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_tdma", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_mimo", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_mimo", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_5ghz", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_5ghz", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_6ghz", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_6ghz", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_2ghz", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_2ghz", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ac", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ac", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11n", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11n", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11g", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11g", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11b", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11b", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11a", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11a", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ad", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ad", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11be", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11be", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11bf", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11bf", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ah", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ah", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ai", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ai", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_eht", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_eht", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he80", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he80", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he160", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he160", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he240", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he240", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he320", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he320", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he480", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he480", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he640", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he640", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he960", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he960", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he1280", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he1280", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he1600", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he1600", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he1920", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he1920", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he2240", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he2240", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he2560", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he2560", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he2880", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he2880", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he3200", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he3200", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he3520", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he3520", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he3840", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he3840", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he4160", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he4160", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he4480", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he4480", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he4800", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he4800", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he5120", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he5120", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he5440", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he5440", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he5760", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he5760", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he6080", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he6080", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he6400", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he6400", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he6720", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he6720", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he7040", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he7040", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he7360", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he7360", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he7680", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he7680", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he8000", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he8000", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he8320", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he8320", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he8640", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he8640", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he8960", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he8960", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he9280", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he9280", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he9600", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he9600", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he9920", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he9920", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he10240", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he10240", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he10560", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he10560", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he10880", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he10880", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he11200", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he11200", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he11520", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he11520", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he11840", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he11840", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he12160", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he12160", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he12480", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he12480", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he12800", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he12800", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he13120", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he13120", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he13440", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he13440", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he13760", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he13760", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he14080", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he14080", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he14400", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he14400", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he14720", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he14720", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he15040", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he15040", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he15360", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he15360", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he15680", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he15680", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he16000", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he16000", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he16320", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he16320", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he16640", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he16640", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he16960", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he16960", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he17280", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he17280", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he17600", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he17600", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he17920", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he17920", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he18240", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he18240", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he18560", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he18560", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he18880", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he18880", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he19200", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he19200", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he19520", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he19520", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he19840", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he19840", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he20160", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he20160", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he20480", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he20480", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he20800", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he20800", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he21120", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he21120", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he21440", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he21440", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he21760", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he21760", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he22080", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he22080", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he22400", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he22400", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he22720", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he22720", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he23040", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he23040", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he23360", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he23360", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he23680", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he23680", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he24000", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he24000", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he24320", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he24320", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he24640", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he24640", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he24960", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he24960", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he25280", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he25280", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he25600", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he25600", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he25920", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he25920", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he26240", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he26240", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he26560", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he26560", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he26880", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he26880", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he27200", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he27200", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he27520", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he27520", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he27840", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he27840", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he28160", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he28160", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he28480", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he28480", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he28800", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he28800", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he29120", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he29120", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he29440", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he29440", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he29760", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he29760", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he30080", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he30080", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he30400", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he30400", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he30720", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he30720", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he31040", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he31040", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he31360", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he31360", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he31680", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he31680", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he32000", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he32000", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he32320", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he32320", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he32640", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he32640", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he32960", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he32960", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he33280", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he33280", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he33600", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he33600", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he33920", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he33920", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he34240", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he34240", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he34560", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he34560", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he34880", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he34880", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he35200", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he35200", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he35520", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he35520", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he35840", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he35840", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he36160", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he36160", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he36480", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he36480", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he36800", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he36800", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he37120", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he37120", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he37440", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he37440", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he37760", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he37760", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he38080", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he38080", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he38400", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he38400", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he38720", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he38720", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he39040", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he39040", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he39360", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he39360", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he39680", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he39680", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he40000", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he40000", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he40320", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he40320", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he40640", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he40640", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he40960", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he40960", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he41280", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he41280", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.supports_11ax_he41600", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_11ax_he41600", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.db.schemas.interface.Interface.model_config", "modulename": "src.db.schemas.interface", "qualname": "Interface.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "default_value": "{&#x27;extra&#x27;: &#x27;allow&#x27;}"}, {"fullname": "src.db.schemas.interface.Interface.to_dict", "modulename": "src.db.schemas.interface", "qualname": "Interface.to_dict", "kind": "function", "doc": "<p>Converts the Interface model instance to a dictionary, excluding unset/None values.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">object</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.db.schemas.interface.Interface.supports_monitor_mode", "modulename": "src.db.schemas.interface", "qualname": "Interface.supports_monitor_mode", "kind": "function", "doc": "<p>Indicates if the interface supports monitor mode.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.helpers", "modulename": "src.helpers", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.helpers.filetools", "modulename": "src.helpers.filetools", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.helpers.nettools", "modulename": "src.helpers.nettools", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.helpers.shelltools", "modulename": "src.helpers.shelltools", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.helpers.shelltools.is_root", "modulename": "src.helpers.shelltools", "qualname": "is_root", "kind": "function", "doc": "<p>Checks if the current user is root.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.helpers.shelltools.run_command", "modulename": "src.helpers.shelltools", "qualname": "run_command", "kind": "function", "doc": "<p>Runs a shell command and returns output (stdout).</p>\n\n<p>Args:\n    command (Union[str, List[str]]): The shell command to run, either as a single string\n                                      or as a list of strings (arguments).\n    require_root (bool): Automatically prepends sudo if not root and not already sudo.\n    capture_output (bool): Whether to capture stdout.\n    check (bool): Whether to raise CalledProcessError on non-zero exit.\n    timeout (Optional[int]): Timeout in seconds for the command.</p>\n\n<p>Returns:\n    str: The stdout from the command, or \"\" on failure if check=False.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">command</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">require_root</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">capture_output</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">check</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.helpers.shelltools.run_command_no_check", "modulename": "src.helpers.shelltools", "qualname": "run_command_no_check", "kind": "function", "doc": "<p>Runs a shell command without checking the exit code.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">command</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">require_root</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">capture_output</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.helpers.shelltools.run_command_with_timeout", "modulename": "src.helpers.shelltools", "qualname": "run_command_with_timeout", "kind": "function", "doc": "<p>Runs a shell command with a timeout and checks the exit code.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">command</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">require_root</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">capture_output</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.helpers.shelltools.run_command_with_timeout_no_check", "modulename": "src.helpers.shelltools", "qualname": "run_command_with_timeout_no_check", "kind": "function", "doc": "<p>Runs a shell command with a timeout without checking the exit code.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">command</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">require_root</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">capture_output</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.helpers.shelltools.run_command_with_sudo", "modulename": "src.helpers.shelltools", "qualname": "run_command_with_sudo", "kind": "function", "doc": "<p>Runs a shell command with sudo.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">command</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">capture_output</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">check</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.helpers.string_utils", "modulename": "src.helpers.string_utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.paths", "modulename": "src.paths", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.paths.THIS_DIR", "modulename": "src.paths", "qualname": "THIS_DIR", "kind": "variable", "doc": "<p></p>\n", "default_value": "PosixPath(&#x27;/home/nexus/capgate/src&#x27;)"}, {"fullname": "src.paths.PROJECT_ROOT", "modulename": "src.paths", "qualname": "PROJECT_ROOT", "kind": "variable", "doc": "<p></p>\n", "default_value": "PosixPath(&#x27;/home/nexus/capgate&#x27;)"}, {"fullname": "src.paths.PLUGIN_DIR", "modulename": "src.paths", "qualname": "PLUGIN_DIR", "kind": "variable", "doc": "<p></p>\n", "default_value": "PosixPath(&#x27;/home/nexus/capgate/src/plugins&#x27;)"}, {"fullname": "src.paths.PLUGIN_METADATA_CACHE", "modulename": "src.paths", "qualname": "PLUGIN_METADATA_CACHE", "kind": "variable", "doc": "<p></p>\n", "default_value": "PosixPath(&#x27;/home/nexus/capgate/src/plugins/.plugin_metadata.json&#x27;)"}, {"fullname": "src.paths.PLUGIN_TEMPLATE_DIR", "modulename": "src.paths", "qualname": "PLUGIN_TEMPLATE_DIR", "kind": "variable", "doc": "<p></p>\n", "default_value": "PosixPath(&#x27;/home/nexus/capgate/src/plugin_template/my_new_plugin&#x27;)"}, {"fullname": "src.paths.LOG_DIR", "modulename": "src.paths", "qualname": "LOG_DIR", "kind": "variable", "doc": "<p></p>\n", "default_value": "PosixPath(&#x27;/home/nexus/capgate/src/logs&#x27;)"}, {"fullname": "src.paths.DEFAULT_LOG_FILE", "modulename": "src.paths", "qualname": "DEFAULT_LOG_FILE", "kind": "variable", "doc": "<p></p>\n", "default_value": "PosixPath(&#x27;/home/nexus/capgate/src/logs/capgate.log&#x27;)"}, {"fullname": "src.paths.CAPGATE_CONFIG_DIR", "modulename": "src.paths", "qualname": "CAPGATE_CONFIG_DIR", "kind": "variable", "doc": "<p></p>\n", "default_value": "PosixPath(&#x27;/home/nexus/capgate/config&#x27;)"}, {"fullname": "src.paths.DEFAULT_CONFIG_FILE", "modulename": "src.paths", "qualname": "DEFAULT_CONFIG_FILE", "kind": "variable", "doc": "<p></p>\n", "default_value": "PosixPath(&#x27;/home/nexus/capgate/config/capgate_config.yaml&#x27;)"}, {"fullname": "src.paths.CAPGATE_DATA_DIR", "modulename": "src.paths", "qualname": "CAPGATE_DATA_DIR", "kind": "variable", "doc": "<p></p>\n", "default_value": "PosixPath(&#x27;/home/nexus/capgate/data&#x27;)"}, {"fullname": "src.paths.CAPTURE_DIR", "modulename": "src.paths", "qualname": "CAPTURE_DIR", "kind": "variable", "doc": "<p></p>\n", "default_value": "PosixPath(&#x27;/home/nexus/capgate/data/captures&#x27;)"}, {"fullname": "src.paths.TMP_DIR", "modulename": "src.paths", "qualname": "TMP_DIR", "kind": "variable", "doc": "<p></p>\n", "default_value": "PosixPath(&#x27;/home/nexus/capgate/tmp&#x27;)"}, {"fullname": "src.paths.OUTPUT_DIR", "modulename": "src.paths", "qualname": "OUTPUT_DIR", "kind": "variable", "doc": "<p></p>\n", "default_value": "PosixPath(&#x27;/home/nexus/capgate/data/output&#x27;)"}, {"fullname": "src.paths.WORDLISTS_DIR", "modulename": "src.paths", "qualname": "WORDLISTS_DIR", "kind": "variable", "doc": "<p></p>\n", "default_value": "PosixPath(&#x27;/home/nexus/capgate/src/wordlists&#x27;)"}, {"fullname": "src.paths.CAPGATE_WEB_ASSETS_DIR", "modulename": "src.paths", "qualname": "CAPGATE_WEB_ASSETS_DIR", "kind": "variable", "doc": "<p></p>\n", "default_value": "PosixPath(&#x27;/home/nexus/capgate/src/web_assets&#x27;)"}, {"fullname": "src.paths.CAPGATE_WEB_TEMPLATES_DIR", "modulename": "src.paths", "qualname": "CAPGATE_WEB_TEMPLATES_DIR", "kind": "variable", "doc": "<p></p>\n", "default_value": "PosixPath(&#x27;/home/nexus/capgate/src/web_assets/templates&#x27;)"}, {"fullname": "src.paths.CAPGATE_WEB_CGI_DIR", "modulename": "src.paths", "qualname": "CAPGATE_WEB_CGI_DIR", "kind": "variable", "doc": "<p></p>\n", "default_value": "PosixPath(&#x27;/home/nexus/capgate/src/web_assets/cgi-bin&#x27;)"}, {"fullname": "src.paths.CAPGATE_CREDENTIALS_FILE", "modulename": "src.paths", "qualname": "CAPGATE_CREDENTIALS_FILE", "kind": "variable", "doc": "<p></p>\n", "default_value": "PosixPath(&#x27;/home/nexus/capgate/data/captured_credentials.jsonl&#x27;)"}, {"fullname": "src.paths.AGENT_DIR", "modulename": "src.paths", "qualname": "AGENT_DIR", "kind": "variable", "doc": "<p></p>\n", "default_value": "PosixPath(&#x27;/home/nexus/capgate/src/agent&#x27;)"}, {"fullname": "src.paths.AGENT_KNOWLEDGE_BASE_DIR", "modulename": "src.paths", "qualname": "AGENT_KNOWLEDGE_BASE_DIR", "kind": "variable", "doc": "<p></p>\n", "default_value": "PosixPath(&#x27;/home/nexus/capgate/src/agent/knowledge_base&#x27;)"}, {"fullname": "src.paths.NEXUSDEVTOOLS_ROOT_DIR", "modulename": "src.paths", "qualname": "NEXUSDEVTOOLS_ROOT_DIR", "kind": "variable", "doc": "<p></p>\n", "default_value": "PosixPath(&#x27;/home/nexus/capgate/nexusdevtools&#x27;)"}, {"fullname": "src.paths.REQUIRED_DIRS", "modulename": "src.paths", "qualname": "REQUIRED_DIRS", "kind": "variable", "doc": "<p></p>\n", "default_value": "[PosixPath(&#x27;/home/nexus/capgate/src/plugins&#x27;), PosixPath(&#x27;/home/nexus/capgate/src/logs&#x27;), PosixPath(&#x27;/home/nexus/capgate/config&#x27;), PosixPath(&#x27;/home/nexus/capgate/data&#x27;), PosixPath(&#x27;/home/nexus/capgate/data/captures&#x27;), PosixPath(&#x27;/home/nexus/capgate/tmp&#x27;), PosixPath(&#x27;/home/nexus/capgate/data/output&#x27;), PosixPath(&#x27;/home/nexus/capgate/src/wordlists&#x27;), PosixPath(&#x27;/home/nexus/capgate/src/web_assets&#x27;), PosixPath(&#x27;/home/nexus/capgate/src/web_assets/templates&#x27;), PosixPath(&#x27;/home/nexus/capgate/src/agent&#x27;), PosixPath(&#x27;/home/nexus/capgate/src/agent/knowledge_base&#x27;)]"}, {"fullname": "src.paths.ensure_directories_for_capgate_startup", "modulename": "src.paths", "qualname": "ensure_directories_for_capgate_startup", "kind": "function", "doc": "<p>Ensures all core CapGate directories exist.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.plugin_template", "modulename": "src.plugin_template", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.plugin_template.my_new_plugin", "modulename": "src.plugin_template.my_new_plugin", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.plugin_template.my_new_plugin.main", "modulename": "src.plugin_template.my_new_plugin.main", "kind": "module", "doc": "<p>${plugin_name}.py \u2014 Auto-generated CapGate plugin\nCreated on ${created_at}\nAuthor: ${author}</p>\n"}, {"fullname": "src.plugin_template.my_new_plugin.main.run", "modulename": "src.plugin_template.my_new_plugin.main", "qualname": "run", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ctx</span><span class=\"p\">:</span> <span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">state_management</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">CapGateContext</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.plugins", "modulename": "src.plugins", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.plugins.el_topo", "modulename": "src.plugins.el_topo", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.plugins.el_topo.main", "modulename": "src.plugins.el_topo.main", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.plugins.el_topo.main.run", "modulename": "src.plugins.el_topo.main", "qualname": "run", "kind": "function", "doc": "<p>Plugin entry point for 'el_topo'.\nThis plugin visualizes the network topology based on data already present in AppState.</p>\n\n<p>Args:\n    app_context (CapGateContext): Global context shared across CapGate,\n                                   containing a reference to AppState.\n    plugin_args (tuple[str]): Optional CLI args passed to the plugin.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">app_context</span><span class=\"p\">:</span> <span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">state_management</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">CapGateContext</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">plugin_args</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.plugins.evil_twin", "modulename": "src.plugins.evil_twin", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.plugins.evil_twin.main", "modulename": "src.plugins.evil_twin.main", "kind": "module", "doc": "<p>Evil Twin Plugin: Orchestrates a rogue Access Point attack to capture Wi-Fi credentials.</p>\n"}, {"fullname": "src.plugins.evil_twin.main.EvilTwinAttack", "modulename": "src.plugins.evil_twin.main", "qualname": "EvilTwinAttack", "kind": "class", "doc": "<p>Manages the lifecycle of an Evil Twin attack.</p>\n"}, {"fullname": "src.plugins.evil_twin.main.EvilTwinAttack.__init__", "modulename": "src.plugins.evil_twin.main", "qualname": "EvilTwinAttack.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">app_context</span><span class=\"p\">:</span> <span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">state_management</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">CapGateContext</span>,</span><span class=\"param\">\t<span class=\"n\">auto_select_mode</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">ap_iface_cli</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">deauth_iface_cli</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">verify_iface_cli</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">internet_iface_cli</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">target_bssid_cli</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">target_ssid_cli</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">target_channel_cli</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "src.plugins.evil_twin.main.EvilTwinAttack.app_context", "modulename": "src.plugins.evil_twin.main", "qualname": "EvilTwinAttack.app_context", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.plugins.evil_twin.main.EvilTwinAttack.app_state", "modulename": "src.plugins.evil_twin.main", "qualname": "EvilTwinAttack.app_state", "kind": "variable", "doc": "<p></p>\n", "annotation": ": core.state_management.state.AppState"}, {"fullname": "src.plugins.evil_twin.main.EvilTwinAttack.logger", "modulename": "src.plugins.evil_twin.main", "qualname": "EvilTwinAttack.logger", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.plugins.evil_twin.main.EvilTwinAttack.interface_controller", "modulename": "src.plugins.evil_twin.main", "qualname": "EvilTwinAttack.interface_controller", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.plugins.evil_twin.main.EvilTwinAttack.ap_manager", "modulename": "src.plugins.evil_twin.main", "qualname": "EvilTwinAttack.ap_manager", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.plugins.evil_twin.main.EvilTwinAttack.dhcp_dns_manager", "modulename": "src.plugins.evil_twin.main", "qualname": "EvilTwinAttack.dhcp_dns_manager", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.plugins.evil_twin.main.EvilTwinAttack.traffic_redirector", "modulename": "src.plugins.evil_twin.main", "qualname": "EvilTwinAttack.traffic_redirector", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.plugins.evil_twin.main.EvilTwinAttack.web_server_manager", "modulename": "src.plugins.evil_twin.main", "qualname": "EvilTwinAttack.web_server_manager", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.plugins.evil_twin.main.EvilTwinAttack.credential_verifier", "modulename": "src.plugins.evil_twin.main", "qualname": "EvilTwinAttack.credential_verifier", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.plugins.evil_twin.main.EvilTwinAttack.ap_interface_name", "modulename": "src.plugins.evil_twin.main", "qualname": "EvilTwinAttack.ap_interface_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.plugins.evil_twin.main.EvilTwinAttack.deauth_interface_name", "modulename": "src.plugins.evil_twin.main", "qualname": "EvilTwinAttack.deauth_interface_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.plugins.evil_twin.main.EvilTwinAttack.verify_interface_name", "modulename": "src.plugins.evil_twin.main", "qualname": "EvilTwinAttack.verify_interface_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.plugins.evil_twin.main.EvilTwinAttack.internet_interface_name", "modulename": "src.plugins.evil_twin.main", "qualname": "EvilTwinAttack.internet_interface_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.plugins.evil_twin.main.EvilTwinAttack.target_ssid", "modulename": "src.plugins.evil_twin.main", "qualname": "EvilTwinAttack.target_ssid", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.plugins.evil_twin.main.EvilTwinAttack.target_bssid", "modulename": "src.plugins.evil_twin.main", "qualname": "EvilTwinAttack.target_bssid", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.plugins.evil_twin.main.EvilTwinAttack.target_channel", "modulename": "src.plugins.evil_twin.main", "qualname": "EvilTwinAttack.target_channel", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "src.plugins.evil_twin.main.EvilTwinAttack.auto_select_mode", "modulename": "src.plugins.evil_twin.main", "qualname": "EvilTwinAttack.auto_select_mode", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.plugins.evil_twin.main.EvilTwinAttack.evil_twin_ip", "modulename": "src.plugins.evil_twin.main", "qualname": "EvilTwinAttack.evil_twin_ip", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.plugins.evil_twin.main.EvilTwinAttack.dhcp_range_start", "modulename": "src.plugins.evil_twin.main", "qualname": "EvilTwinAttack.dhcp_range_start", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.plugins.evil_twin.main.EvilTwinAttack.dhcp_range_end", "modulename": "src.plugins.evil_twin.main", "qualname": "EvilTwinAttack.dhcp_range_end", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.plugins.evil_twin.main.EvilTwinAttack.dhcp_lease_time", "modulename": "src.plugins.evil_twin.main", "qualname": "EvilTwinAttack.dhcp_lease_time", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.plugins.evil_twin.main.EvilTwinAttack.upstream_dns", "modulename": "src.plugins.evil_twin.main", "qualname": "EvilTwinAttack.upstream_dns", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.plugins.evil_twin.main.EvilTwinAttack.credentials_captured_event", "modulename": "src.plugins.evil_twin.main", "qualname": "EvilTwinAttack.credentials_captured_event", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.plugins.evil_twin.main.EvilTwinAttack.captured_creds", "modulename": "src.plugins.evil_twin.main", "qualname": "EvilTwinAttack.captured_creds", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "src.plugins.evil_twin.main.EvilTwinAttack.ap_iface_nm_was_managed", "modulename": "src.plugins.evil_twin.main", "qualname": "EvilTwinAttack.ap_iface_nm_was_managed", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.plugins.evil_twin.main.EvilTwinAttack.ap_iface_original_ssid", "modulename": "src.plugins.evil_twin.main", "qualname": "EvilTwinAttack.ap_iface_original_ssid", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.plugins.evil_twin.main.EvilTwinAttack.ap_iface_original_bssid", "modulename": "src.plugins.evil_twin.main", "qualname": "EvilTwinAttack.ap_iface_original_bssid", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.plugins.evil_twin.main.EvilTwinAttack.deauth_iface_nm_was_managed", "modulename": "src.plugins.evil_twin.main", "qualname": "EvilTwinAttack.deauth_iface_nm_was_managed", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.plugins.evil_twin.main.EvilTwinAttack.select_interfaces", "modulename": "src.plugins.evil_twin.main", "qualname": "EvilTwinAttack.select_interfaces", "kind": "function", "doc": "<p>Selects and configures interfaces for the Evil Twin attack roles (AP, Deauth, Verification).\nPrioritizes user-provided CLI args, then auto-selects based on capabilities.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.plugins.evil_twin.main.EvilTwinAttack.find_target_ap", "modulename": "src.plugins.evil_twin.main", "qualname": "EvilTwinAttack.find_target_ap", "kind": "function", "doc": "<p>Uses NetworkScanner to scan for target APs and selects one.\nUpdates self.target_ssid, self.target_bssid, self.target_channel.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.plugins.evil_twin.main.EvilTwinAttack.setup_infrastructure", "modulename": "src.plugins.evil_twin.main", "qualname": "EvilTwinAttack.setup_infrastructure", "kind": "function", "doc": "<p>Sets up the rogue AP, DHCP/DNS, and traffic redirection.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.plugins.evil_twin.main.EvilTwinAttack.run_attack_loop", "modulename": "src.plugins.evil_twin.main", "qualname": "EvilTwinAttack.run_attack_loop", "kind": "function", "doc": "<p>Main attack loop: Deauthenticates clients and waits for credentials.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.plugins.evil_twin.main.EvilTwinAttack.verify_and_cleanup", "modulename": "src.plugins.evil_twin.main", "qualname": "EvilTwinAttack.verify_and_cleanup", "kind": "function", "doc": "<p>Verifies captured credentials (if any) and performs final cleanup specific to Evil Twin.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">attack_success</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.plugins.evil_twin.main.EvilTwinAttack.cleanup", "modulename": "src.plugins.evil_twin.main", "qualname": "EvilTwinAttack.cleanup", "kind": "function", "doc": "<p>Performs comprehensive cleanup of all attack infrastructure.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.plugins.evil_twin.main.run", "modulename": "src.plugins.evil_twin.main", "qualname": "run", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">app_context</span><span class=\"p\">:</span> <span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">state_management</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">CapGateContext</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">plugin_args</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.plugins.osint_profiler", "modulename": "src.plugins.osint_profiler", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.plugins.osint_profiler.main", "modulename": "src.plugins.osint_profiler.main", "kind": "module", "doc": "<p>OSINT Profiler Plugin: Gathers open-source intelligence and checks for leaked credentials.</p>\n"}, {"fullname": "src.plugins.osint_profiler.main.OSINTProfiler", "modulename": "src.plugins.osint_profiler.main", "qualname": "OSINTProfiler", "kind": "class", "doc": "<p>Manages OSINT gathering, data breach checks, and target profiling.</p>\n"}, {"fullname": "src.plugins.osint_profiler.main.OSINTProfiler.__init__", "modulename": "src.plugins.osint_profiler.main", "qualname": "OSINTProfiler.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">app_context</span><span class=\"p\">:</span> <span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">state_management</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">CapGateContext</span></span>)</span>"}, {"fullname": "src.plugins.osint_profiler.main.OSINTProfiler.app_context", "modulename": "src.plugins.osint_profiler.main", "qualname": "OSINTProfiler.app_context", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.plugins.osint_profiler.main.OSINTProfiler.app_state", "modulename": "src.plugins.osint_profiler.main", "qualname": "OSINTProfiler.app_state", "kind": "variable", "doc": "<p></p>\n", "annotation": ": core.state_management.state.AppState"}, {"fullname": "src.plugins.osint_profiler.main.OSINTProfiler.logger", "modulename": "src.plugins.osint_profiler.main", "qualname": "OSINTProfiler.logger", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.plugins.osint_profiler.main.OSINTProfiler.findings", "modulename": "src.plugins.osint_profiler.main", "qualname": "OSINTProfiler.findings", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[Dict[str, Any]]"}, {"fullname": "src.plugins.osint_profiler.main.OSINTProfiler.target_email", "modulename": "src.plugins.osint_profiler.main", "qualname": "OSINTProfiler.target_email", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.plugins.osint_profiler.main.OSINTProfiler.target_domain", "modulename": "src.plugins.osint_profiler.main", "qualname": "OSINTProfiler.target_domain", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.plugins.osint_profiler.main.OSINTProfiler.target_username", "modulename": "src.plugins.osint_profiler.main", "qualname": "OSINTProfiler.target_username", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.plugins.osint_profiler.main.OSINTProfiler.hibp_api_key", "modulename": "src.plugins.osint_profiler.main", "qualname": "OSINTProfiler.hibp_api_key", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.plugins.osint_profiler.main.OSINTProfiler.profile_company_name", "modulename": "src.plugins.osint_profiler.main", "qualname": "OSINTProfiler.profile_company_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "src.plugins.osint_profiler.main.OSINTProfiler.output_dir", "modulename": "src.plugins.osint_profiler.main", "qualname": "OSINTProfiler.output_dir", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.plugins.osint_profiler.main.OSINTProfiler.enrich_appstate", "modulename": "src.plugins.osint_profiler.main", "qualname": "OSINTProfiler.enrich_appstate", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.plugins.osint_profiler.main.OSINTProfiler.generate_wordlist", "modulename": "src.plugins.osint_profiler.main", "qualname": "OSINTProfiler.generate_wordlist", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.plugins.osint_profiler.main.OSINTProfiler.output_filepath", "modulename": "src.plugins.osint_profiler.main", "qualname": "OSINTProfiler.output_filepath", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.plugins.osint_profiler.main.OSINTProfiler.execute_profiling", "modulename": "src.plugins.osint_profiler.main", "qualname": "OSINTProfiler.execute_profiling", "kind": "function", "doc": "<p>Executes the OSINT profiling and breach checking process.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.plugins.osint_profiler.main.OSINTProfiler.cleanup", "modulename": "src.plugins.osint_profiler.main", "qualname": "OSINTProfiler.cleanup", "kind": "function", "doc": "<p>No specific cleanup needed for this plugin after execution, findings are saved.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.plugins.osint_profiler.main.run", "modulename": "src.plugins.osint_profiler.main", "qualname": "run", "kind": "function", "doc": "<p>Plugin entry point for the OSINT Profiler.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">app_context</span><span class=\"p\">:</span> <span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">state_management</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">CapGateContext</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">plugin_args</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.plugins.wifi_crack_automation", "modulename": "src.plugins.wifi_crack_automation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.plugins.wifi_crack_automation.main", "modulename": "src.plugins.wifi_crack_automation.main", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.plugins.wifi_crack_automation.main.plugin_name", "modulename": "src.plugins.wifi_crack_automation.main", "qualname": "plugin_name", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;wifi_crack_automation&#x27;"}, {"fullname": "src.plugins.wifi_crack_automation.main.run", "modulename": "src.plugins.wifi_crack_automation.main", "qualname": "run", "kind": "function", "doc": "<p>Main entry point for the Wi-Fi Crack Automation plugin.\nManages the overall workflow from interface setup to cracking,\nand ensures proper cleanup of network states.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">app_context</span><span class=\"p\">:</span> <span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">state_management</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">CapGateContext</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">plugin_args</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.plugins.wifi_crack_automation.phases", "modulename": "src.plugins.wifi_crack_automation.phases", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.plugins.wifi_crack_automation.phases.phase1_interface", "modulename": "src.plugins.wifi_crack_automation.phases.phase1_interface", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.plugins.wifi_crack_automation.phases.phase1_interface.select_interface", "modulename": "src.plugins.wifi_crack_automation.phases.phase1_interface", "qualname": "select_interface", "kind": "function", "doc": "<p>Phase 1: Selects a suitable wireless interface for monitor mode from AppState.\nIt then attempts to enable monitor mode using the InterfaceController.</p>\n\n<p>Args:\n    app_context (CapGateContext): The global CapGate context for the current run.</p>\n\n<p>Returns:\n    bool: True if a monitor-capable interface is selected and successfully put into\n          monitor mode; False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">app_context</span><span class=\"p\">:</span> <span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">state_management</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">CapGateContext</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.plugins.wifi_crack_automation.phases.phase2_scan", "modulename": "src.plugins.wifi_crack_automation.phases.phase2_scan", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.plugins.wifi_crack_automation.phases.phase2_scan.scan_for_networks", "modulename": "src.plugins.wifi_crack_automation.phases.phase2_scan", "qualname": "scan_for_networks", "kind": "function", "doc": "<p>Scan nearby Wi-Fi networks using airodump-ng via NetworkScanner.\nUpdates app_context with selected target BSSID, channel, and ESSID.\nReturns the selected target network dictionary or None on failure.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">app_context</span><span class=\"p\">:</span> <span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">state_management</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">CapGateContext</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.plugins.wifi_crack_automation.phases.phase3_capture", "modulename": "src.plugins.wifi_crack_automation.phases.phase3_capture", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.plugins.wifi_crack_automation.phases.phase3_capture.capture_handshake", "modulename": "src.plugins.wifi_crack_automation.phases.phase3_capture", "qualname": "capture_handshake", "kind": "function", "doc": "<p>Phase 3: Initiates WPA handshake capture for the selected target network\nusing the CaptureManager.</p>\n\n<p>Args:\n    app_context (CapGateContext): The global CapGate context for the current run.</p>\n\n<p>Returns:\n    bool: True if a handshake is successfully captured and the file path is stored, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">app_context</span><span class=\"p\">:</span> <span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">state_management</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">CapGateContext</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.plugins.wifi_crack_automation.phases.phase4_crack", "modulename": "src.plugins.wifi_crack_automation.phases.phase4_crack", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.plugins.wifi_crack_automation.phases.phase4_crack.crack_handshake", "modulename": "src.plugins.wifi_crack_automation.phases.phase4_crack", "qualname": "crack_handshake", "kind": "function", "doc": "<p>Phase 4: Attempts to crack a WPA handshake using the CrackingManager.</p>\n\n<p>Args:\n    app_context (CapGateContext): The global CapGate context for the current run.</p>\n\n<p>Returns:\n    bool: True if the password is cracked and stored, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">app_context</span><span class=\"p\">:</span> <span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">state_management</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">CapGateContext</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.plugins.wifi_crack_automation.utils", "modulename": "src.plugins.wifi_crack_automation.utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.plugins.wifi_crack_automation.utils.commands", "modulename": "src.plugins.wifi_crack_automation.utils.commands", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.plugins.wifi_crack_automation.utils.commands.run_cmd", "modulename": "src.plugins.wifi_crack_automation.utils.commands", "qualname": "run_cmd", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cmd</span>, </span><span class=\"param\"><span class=\"n\">capture_output</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.plugins.wifi_crack_automation.utils.constants", "modulename": "src.plugins.wifi_crack_automation.utils.constants", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.plugins.wifi_crack_automation.utils.constants.DEFAULT_WORDLIST", "modulename": "src.plugins.wifi_crack_automation.utils.constants", "qualname": "DEFAULT_WORDLIST", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;home/nexus/wifite2/wordlist-top4800-probable.txt&#x27;"}, {"fullname": "src.plugins.wifi_crack_automation.utils.constants.CAPTURE_DIR", "modulename": "src.plugins.wifi_crack_automation.utils.constants", "qualname": "CAPTURE_DIR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;handshakes&#x27;"}, {"fullname": "src.plugins.wifi_crack_automation.utils.constants.POTFILE", "modulename": "src.plugins.wifi_crack_automation.utils.constants", "qualname": "POTFILE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/root/.hashcat/hashcat.potfile&#x27;"}, {"fullname": "src.plugins.wifi_crack_automation.utils.constants.DEFAULT_CAPTURE_FILE", "modulename": "src.plugins.wifi_crack_automation.utils.constants", "qualname": "DEFAULT_CAPTURE_FILE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;handshake.pcap&#x27;"}, {"fullname": "src.plugins.wifi_crack_automation.utils.constants.DEFAULT_CAPTURE_PATH", "modulename": "src.plugins.wifi_crack_automation.utils.constants", "qualname": "DEFAULT_CAPTURE_PATH", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;handshakes/handshake.pcap&#x27;"}, {"fullname": "src.plugins.wifi_crack_automation.utils.parsers", "modulename": "src.plugins.wifi_crack_automation.utils.parsers", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.plugins.wifi_crack_automation.utils.parsers.parse_airodump_csv", "modulename": "src.plugins.wifi_crack_automation.utils.parsers", "qualname": "parse_airodump_csv", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">csv_lines</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.plugins.wifi_crack_automation.utils.parsers.parse_hashcat_potfile", "modulename": "src.plugins.wifi_crack_automation.utils.parsers", "qualname": "parse_hashcat_potfile", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">hccapx_path</span>, </span><span class=\"param\"><span class=\"n\">potfile_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.plugins.wifi_crack_automation.utils.parsers.parse_crack_results", "modulename": "src.plugins.wifi_crack_automation.utils.parsers", "qualname": "parse_crack_results", "kind": "function", "doc": "<p>Parses the output of a hashcat cracking session.\nReturns a dictionary with the cracked key and any additional details.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">crack_output</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.runner", "modulename": "src.runner", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.runner.CapGateRunner", "modulename": "src.runner", "qualname": "CapGateRunner", "kind": "class", "doc": "<p>Central runner class responsible for initializing core systems,\nmanaging context, and executing plugins or workflows.</p>\n"}, {"fullname": "src.runner.CapGateRunner.__init__", "modulename": "src.runner", "qualname": "CapGateRunner.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cli_state</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "src.runner.CapGateRunner.logger", "modulename": "src.runner", "qualname": "CapGateRunner.logger", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.runner.CapGateRunner.cli_state", "modulename": "src.runner", "qualname": "CapGateRunner.cli_state", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.runner.CapGateRunner.context", "modulename": "src.runner", "qualname": "CapGateRunner.context", "kind": "variable", "doc": "<p></p>\n", "annotation": ": core.state_management.context.CapGateContext"}, {"fullname": "src.runner.CapGateRunner.app_state", "modulename": "src.runner", "qualname": "CapGateRunner.app_state", "kind": "variable", "doc": "<p></p>\n", "annotation": ": core.state_management.state.AppState"}, {"fullname": "src.runner.CapGateRunner.plugin_loader", "modulename": "src.runner", "qualname": "CapGateRunner.plugin_loader", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.runner.CapGateRunner.list_plugins", "modulename": "src.runner", "qualname": "CapGateRunner.list_plugins", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.runner.CapGateRunner.run_plugin", "modulename": "src.runner", "qualname": "CapGateRunner.run_plugin", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.runner.CapGateRunner.get_interfaces", "modulename": "src.runner", "qualname": "CapGateRunner.get_interfaces", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">wireless_only</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">monitor_only</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">is_up_only</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">schemas</span><span class=\"o\">.</span><span class=\"n\">interface</span><span class=\"o\">.</span><span class=\"n\">Interface</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.runner.CapGateRunner.run", "modulename": "src.runner", "qualname": "CapGateRunner.run", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"n\">plugin_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.runner.CapGateRunner.load_discovery_json", "modulename": "src.runner", "qualname": "CapGateRunner.load_discovery_json", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.runner.main", "modulename": "src.runner", "qualname": "main", "kind": "function", "doc": "<p>Main script entry point for command-line use.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.utils", "modulename": "src.utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.utils.render_template", "modulename": "src.utils", "qualname": "render_template", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">template_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">replacements</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.utils.sanitize_plugin_name", "modulename": "src.utils", "qualname": "sanitize_plugin_name", "kind": "function", "doc": "<p>Sanitize a plugin name to be a valid Python identifier.</p>\n\n<ul>\n<li>Lowercase</li>\n<li>Replace spaces and hyphens with underscores</li>\n<li>Remove invalid characters</li>\n<li>Ensure it starts with a letter or underscore</li>\n</ul>\n\n<p>Args:\n    name (str): Raw plugin name input</p>\n\n<p>Returns:\n    str: Sanitized plugin name</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.vision", "modulename": "src.vision", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.vision.scanners", "modulename": "src.vision.scanners", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.vision.scanners.arp_scan", "modulename": "src.vision.scanners.arp_scan", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.vision.scanners.arp_scan.arp_scan", "modulename": "src.vision.scanners.arp_scan", "qualname": "arp_scan", "kind": "function", "doc": "<p>Scans the given IP range for live devices using ARP.</p>\n\n<p>Args:\n    interface (str): The network interface to use (e.g., \"wlan0\").\n    target_range (str): The IP/CIDR range to scan (default is 192.168.1.0/24).</p>\n\n<p>Returns:\n    List[Dict[str, str]]: A list of discovered device info dictionaries,\n                           each with \"ip\" and \"mac\" keys.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">interface</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">target_range</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;192.168.1.0/24&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.vision.scanners.arp_scan.arp_scan_single_ip", "modulename": "src.vision.scanners.arp_scan", "qualname": "arp_scan_single_ip", "kind": "function", "doc": "<p>Scans a single IP address for its MAC address using ARP.\nArgs:\n    interface (str): The network interface to use (e.g., \"wlan0\").\n    target_ip (str): The target IP address to scan.\nReturns:\n    Dict[str, Optional[str]]: A dictionary with the target IP and its MAC address (or None).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">interface</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">target_ip</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.vision.scanners.arp_scan.arp_scan_multiple_ips", "modulename": "src.vision.scanners.arp_scan", "qualname": "arp_scan_multiple_ips", "kind": "function", "doc": "<p>Scans multiple IP addresses for their MAC addresses using ARP.</p>\n\n<p>Args:\n    interface (str): The network interface to use (e.g., \"wlan0\").\n    target_ips (List[str]): List of target IP addresses to scan.</p>\n\n<p>Returns:\n    List[Dict[str, Optional[str]]]: A list of dictionaries with IP and MAC addresses.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">interface</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">target_ips</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.vision.scanners.arp_scan.arp_scan_from_file", "modulename": "src.vision.scanners.arp_scan", "qualname": "arp_scan_from_file", "kind": "function", "doc": "<p>Scans IP addresses listed in a file for their MAC addresses using ARP.\nArgs:\n    interface (str): The network interface to use (e.g., \"wlan0\").\n    file_path (str): Path to the file containing IP addresses, one per line.\nReturns:\n    List[Dict[str, Optional[str]]]: A list of dictionaries with IP and MAC addresses.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">interface</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.vision.scanners.device_scanner", "modulename": "src.vision.scanners.device_scanner", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.vision.scanners.device_scanner.parse_arp_table", "modulename": "src.vision.scanners.device_scanner", "qualname": "parse_arp_table", "kind": "function", "doc": "<p>Uses <code>arp -an</code> to get IP/MAC pairs seen by the host.\nReturns a list of (MAC, IP) tuples.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.vision.scanners.device_scanner.scan_devices_from_arp_table_and_update_state", "modulename": "src.vision.scanners.device_scanner", "qualname": "scan_devices_from_arp_table_and_update_state", "kind": "function", "doc": "<p>Scans devices from the local ARP table and updates the AppState's discovery_graph.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">app_state</span><span class=\"p\">:</span> <span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">state_management</span><span class=\"o\">.</span><span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">AppState</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.vision.scanners.iface_scanner", "modulename": "src.vision.scanners.iface_scanner", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.vision.scanners.iface_scanner.get_mac", "modulename": "src.vision.scanners.iface_scanner", "qualname": "get_mac", "kind": "function", "doc": "<p>Retrieves the MAC address for a given network interface using 'ip link show'.\nReturns \"00:00:00:00:00:00\" if not found or on error.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">interface</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.vision.scanners.iface_scanner.get_ip_address", "modulename": "src.vision.scanners.iface_scanner", "qualname": "get_ip_address", "kind": "function", "doc": "<p>Retrieves the primary IPv4 address (with CIDR) for a given interface.\nReturns None if no IPv4 address is found.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">interface</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.vision.scanners.iface_scanner.scan_interfaces_and_update_state", "modulename": "src.vision.scanners.iface_scanner", "qualname": "scan_interfaces_and_update_state", "kind": "function", "doc": "<p>Scans network interfaces on the system and updates the AppState's discovery_graph\nwith detailed interface information.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">app_state</span><span class=\"p\">:</span> <span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">state_management</span><span class=\"o\">.</span><span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">AppState</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.wordlists", "modulename": "src.wordlists", "kind": "module", "doc": "<p></p>\n"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();